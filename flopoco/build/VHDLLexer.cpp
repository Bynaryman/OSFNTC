#line 1 "/home/binaryman/Documents/PhD/flopoco/build/VHDLLexer.cpp"

#line 3 "/home/binaryman/Documents/PhD/flopoco/build/VHDLLexer.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 4
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

#ifdef yy_create_buffer
#define Flopoco__create_buffer_ALREADY_DEFINED
#else
#define yy_create_buffer Flopoco__create_buffer
#endif

#ifdef yy_delete_buffer
#define Flopoco__delete_buffer_ALREADY_DEFINED
#else
#define yy_delete_buffer Flopoco__delete_buffer
#endif

#ifdef yy_scan_buffer
#define Flopoco__scan_buffer_ALREADY_DEFINED
#else
#define yy_scan_buffer Flopoco__scan_buffer
#endif

#ifdef yy_scan_string
#define Flopoco__scan_string_ALREADY_DEFINED
#else
#define yy_scan_string Flopoco__scan_string
#endif

#ifdef yy_scan_bytes
#define Flopoco__scan_bytes_ALREADY_DEFINED
#else
#define yy_scan_bytes Flopoco__scan_bytes
#endif

#ifdef yy_init_buffer
#define Flopoco__init_buffer_ALREADY_DEFINED
#else
#define yy_init_buffer Flopoco__init_buffer
#endif

#ifdef yy_flush_buffer
#define Flopoco__flush_buffer_ALREADY_DEFINED
#else
#define yy_flush_buffer Flopoco__flush_buffer
#endif

#ifdef yy_load_buffer_state
#define Flopoco__load_buffer_state_ALREADY_DEFINED
#else
#define yy_load_buffer_state Flopoco__load_buffer_state
#endif

#ifdef yy_switch_to_buffer
#define Flopoco__switch_to_buffer_ALREADY_DEFINED
#else
#define yy_switch_to_buffer Flopoco__switch_to_buffer
#endif

#ifdef yypush_buffer_state
#define Flopoco_push_buffer_state_ALREADY_DEFINED
#else
#define yypush_buffer_state Flopoco_push_buffer_state
#endif

#ifdef yypop_buffer_state
#define Flopoco_pop_buffer_state_ALREADY_DEFINED
#else
#define yypop_buffer_state Flopoco_pop_buffer_state
#endif

#ifdef yyensure_buffer_stack
#define Flopoco_ensure_buffer_stack_ALREADY_DEFINED
#else
#define yyensure_buffer_stack Flopoco_ensure_buffer_stack
#endif

#ifdef yylex
#define Flopoco_lex_ALREADY_DEFINED
#else
#define yylex Flopoco_lex
#endif

#ifdef yyrestart
#define Flopoco_restart_ALREADY_DEFINED
#else
#define yyrestart Flopoco_restart
#endif

#ifdef yylex_init
#define Flopoco_lex_init_ALREADY_DEFINED
#else
#define yylex_init Flopoco_lex_init
#endif

#ifdef yylex_init_extra
#define Flopoco_lex_init_extra_ALREADY_DEFINED
#else
#define yylex_init_extra Flopoco_lex_init_extra
#endif

#ifdef yylex_destroy
#define Flopoco_lex_destroy_ALREADY_DEFINED
#else
#define yylex_destroy Flopoco_lex_destroy
#endif

#ifdef yyget_debug
#define Flopoco_get_debug_ALREADY_DEFINED
#else
#define yyget_debug Flopoco_get_debug
#endif

#ifdef yyset_debug
#define Flopoco_set_debug_ALREADY_DEFINED
#else
#define yyset_debug Flopoco_set_debug
#endif

#ifdef yyget_extra
#define Flopoco_get_extra_ALREADY_DEFINED
#else
#define yyget_extra Flopoco_get_extra
#endif

#ifdef yyset_extra
#define Flopoco_set_extra_ALREADY_DEFINED
#else
#define yyset_extra Flopoco_set_extra
#endif

#ifdef yyget_in
#define Flopoco_get_in_ALREADY_DEFINED
#else
#define yyget_in Flopoco_get_in
#endif

#ifdef yyset_in
#define Flopoco_set_in_ALREADY_DEFINED
#else
#define yyset_in Flopoco_set_in
#endif

#ifdef yyget_out
#define Flopoco_get_out_ALREADY_DEFINED
#else
#define yyget_out Flopoco_get_out
#endif

#ifdef yyset_out
#define Flopoco_set_out_ALREADY_DEFINED
#else
#define yyset_out Flopoco_set_out
#endif

#ifdef yyget_leng
#define Flopoco_get_leng_ALREADY_DEFINED
#else
#define yyget_leng Flopoco_get_leng
#endif

#ifdef yyget_text
#define Flopoco_get_text_ALREADY_DEFINED
#else
#define yyget_text Flopoco_get_text
#endif

#ifdef yyget_lineno
#define Flopoco_get_lineno_ALREADY_DEFINED
#else
#define yyget_lineno Flopoco_get_lineno
#endif

#ifdef yyset_lineno
#define Flopoco_set_lineno_ALREADY_DEFINED
#else
#define yyset_lineno Flopoco_set_lineno
#endif

#ifdef yyget_column
#define Flopoco_get_column_ALREADY_DEFINED
#else
#define yyget_column Flopoco_get_column
#endif

#ifdef yyset_column
#define Flopoco_set_column_ALREADY_DEFINED
#else
#define yyset_column Flopoco_set_column
#endif

#ifdef yywrap
#define Flopoco_wrap_ALREADY_DEFINED
#else
#define yywrap Flopoco_wrap
#endif

#ifdef yyalloc
#define Flopoco_alloc_ALREADY_DEFINED
#else
#define yyalloc Flopoco_alloc
#endif

#ifdef yyrealloc
#define Flopoco_realloc_ALREADY_DEFINED
#else
#define yyrealloc Flopoco_realloc
#endif

#ifdef yyfree
#define Flopoco_free_ALREADY_DEFINED
#else
#define yyfree Flopoco_free
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#ifndef SIZE_MAX
#define SIZE_MAX               (~(size_t)0)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))

/* An opaque pointer. */
#ifndef YY_TYPEDEF_YY_SCANNER_T
#define YY_TYPEDEF_YY_SCANNER_T
typedef void* yyscan_t;
#endif

/* For convenience, these vars (plus the bison vars far below)
   are macros in the reentrant scanner. */
#define yyin yyg->yyin_r
#define yyout yyg->yyout_r
#define yyextra yyg->yyextra_r
#define yyleng yyg->yyleng_r
#define yytext yyg->yytext_r
#define yylineno (YY_CURRENT_BUFFER_LVALUE->yy_bs_lineno)
#define yycolumn (YY_CURRENT_BUFFER_LVALUE->yy_bs_column)
#define yy_flex_debug yyg->yy_flex_debug_r

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yyg->yy_start = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yyg->yy_start - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin , yyscanner )
#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
    
    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE yylex.
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < yyleng; ++yyl )\
                    if ( yytext[yyl] == '\n' )\
                        --yylineno;\
            }while(0)
    #define YY_LINENO_REWIND_TO(dst) \
            do {\
                const char *p;\
                for ( p = yy_cp-1; p >= (dst); --p)\
                    if ( *p == '\n' )\
                        --yylineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = yyg->yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yyg->yy_c_buf_p = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )
#define unput(c) yyunput( c, yyg->yytext_ptr , yyscanner )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( yyg->yy_buffer_stack \
                          ? yyg->yy_buffer_stack[yyg->yy_buffer_stack_top] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]

void yyrestart ( FILE *input_file , yyscan_t yyscanner );
void yy_switch_to_buffer ( YY_BUFFER_STATE new_buffer , yyscan_t yyscanner );
YY_BUFFER_STATE yy_create_buffer ( FILE *file, int size , yyscan_t yyscanner );
void yy_delete_buffer ( YY_BUFFER_STATE b , yyscan_t yyscanner );
void yy_flush_buffer ( YY_BUFFER_STATE b , yyscan_t yyscanner );
void yypush_buffer_state ( YY_BUFFER_STATE new_buffer , yyscan_t yyscanner );
void yypop_buffer_state ( yyscan_t yyscanner );

static void yyensure_buffer_stack ( yyscan_t yyscanner );
static void yy_load_buffer_state ( yyscan_t yyscanner );
static void yy_init_buffer ( YY_BUFFER_STATE b, FILE *file , yyscan_t yyscanner );
#define YY_FLUSH_BUFFER yy_flush_buffer( YY_CURRENT_BUFFER , yyscanner)

YY_BUFFER_STATE yy_scan_buffer ( char *base, yy_size_t size , yyscan_t yyscanner );
YY_BUFFER_STATE yy_scan_string ( const char *yy_str , yyscan_t yyscanner );
YY_BUFFER_STATE yy_scan_bytes ( const char *bytes, int len , yyscan_t yyscanner );

void *yyalloc ( yy_size_t , yyscan_t yyscanner );
void *yyrealloc ( void *, yy_size_t , yyscan_t yyscanner );
void yyfree ( void * , yyscan_t yyscanner );

#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}
#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define Flopoco_wrap(yyscanner) (/*CONSTCOND*/1)
#define YY_SKIP_YYWRAP
typedef flex_uint8_t YY_CHAR;

typedef int yy_state_type;

#define yytext_ptr yytext_r

static yy_state_type yy_get_previous_state ( yyscan_t yyscanner );
static yy_state_type yy_try_NUL_trans ( yy_state_type current_state  , yyscan_t yyscanner);
static int yy_get_next_buffer ( yyscan_t yyscanner );
static void yynoreturn yy_fatal_error ( const char* msg , yyscan_t yyscanner );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yyg->yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yyg->yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yyg->yy_c_buf_p = yy_cp;
#define YY_NUM_RULES 118
#define YY_END_OF_BUFFER 119
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static const flex_int16_t yy_accept[501] =
    {   0,
        0,    0,  119,  117,  108,  109,  110,  117,  117,  110,
      110,  110,  111,  110,  110,  112,  110,   97,  110,  110,
      110,  104,  104,  104,  104,  104,  104,  104,  104,  104,
      104,  104,  104,  104,  104,  104,  104,  104,  104,  104,
      104,  104,    0,  114,    0,  114,    0,  110,  112,  116,
        0,    0,  112,    0,    0,    0,   96,   95,   94,    0,
      104,  107,  104,  104,  104,  104,  104,  104,  104,  104,
        0,    0,    0,    0,  104,  104,  104,  104,  104,  104,
      104,  104,  104,  104,  104,  104,  104,  104,  104,  104,
      104,   33,  104,   35,   38,  104,  104,  104,  104,  104,

      104,  104,  104,  104,   52,   53,  104,   55,  104,  104,
      104,  104,  104,  104,  104,  104,  104,  104,  104,  104,
      104,  104,  104,  104,  104,   81,  104,  104,  104,  104,
      104,  104,  104,  104,  104,  104,  113,  112,    0,  116,
        0,  112,    0,    0,  112,    1,  104,  104,  104,    5,
        6,  104,  104,  104,  104,  105,    0,    0,    0,  104,
      104,  104,  104,   15,  104,  104,  104,  104,  104,  104,
       23,  104,  104,  104,   27,  104,  104,  104,  104,  104,
      104,  104,  104,  104,  104,  104,  104,   44,   45,  104,
       47,  104,   49,   50,  104,  104,  104,   57,  104,  104,

      104,  104,  104,  104,  104,  104,   67,  104,  104,   70,
       71,  104,  104,  104,  104,   75,   76,   77,   78,  104,
      104,  104,  104,  104,  104,  104,  104,   87,  104,  104,
      104,  104,  104,  104,   92,  112,    0,    0,    0,  112,
        0,    0,    0,  112,    0,  112,    0,  104,  104,  104,
      104,  104,  104,  104,  106,  115,    0,    0,    0,    0,
      104,  104,   13,  104,  103,  104,  104,  104,  104,  104,
       21,  104,  104,   25,   26,  104,  104,  104,  104,  104,
      104,  104,  104,  104,  104,  104,   43,   46,   48,   51,
       54,  104,  104,   59,  104,  104,   63,  104,  104,  104,

      104,  104,  104,  104,  104,  104,    0,  104,   80,  104,
       83,  104,  104,  104,  104,   89,   98,  104,   99,   91,
        0,    0,    0,    0,  104,    3,    4,  104,    8,  104,
      104,   11,   12,  104,  104,  104,  104,  104,  104,   22,
      104,  104,  104,   31,  104,  104,  104,   37,   39,  104,
      104,  104,  104,  104,    0,  104,  104,   64,  104,  104,
      104,  104,  104,  104,  104,  104,  104,  104,  104,  104,
       85,   86,  104,   90,    0,  112,    0,    0,    0,    0,
        0,  112,    2,  104,    9,  104,   14,  104,  104,  104,
      104,   20,   24,  104,  104,  104,  104,   34,  104,  104,

      104,  104,   56,  104,    0,  104,  104,  104,   65,  104,
       68,   69,  100,  104,   74,   73,  104,  104,  104,  104,
      104,  112,    0,  112,    0,  104,  104,  104,  104,  104,
      104,  104,  104,   30,   32,  104,   40,   41,   42,   58,
        0,  104,  104,   62,  104,  104,  104,   79,  104,  104,
      104,  104,  104,  104,  104,   18,  104,   28,   29,    0,
       36,  101,  104,  104,   66,   72,  104,  104,  104,   88,
      104,   10,   16,  104,  104,    0,   60,   61,  104,   82,
      104,  104,  104,   19,    0,    0,   84,  104,  104,  102,
      104,    7,  104,  104,   17,  104,  104,  104,   93,    0

    } ;

static const YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    4,    5,    6,    7,    8,    9,   10,   11,
       12,   13,   14,   15,   16,   17,   18,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   20,   21,   22,
       23,   24,    7,    7,   25,   26,   27,   28,   29,   30,
       31,   32,   33,   34,   35,   36,   37,   38,   39,   40,
       34,   41,   42,   43,   44,   45,   46,   47,   48,   34,
        7,    7,    7,   49,   50,    7,   51,   52,   53,   54,

       55,   56,   57,   58,   59,   60,   61,   62,   63,   64,
       65,   66,   60,   67,   68,   69,   70,   71,   72,   73,
       74,   60,    7,   75,    7,    7,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static const YY_CHAR yy_meta[76] =
    {   0,
        1,    2,    3,    2,    4,    5,    2,    6,    2,    2,
        2,    2,    2,    2,    2,    2,    7,    2,    8,    9,
        2,    2,    2,    2,    8,    8,    8,    8,    8,    8,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,   10,
        8,    8,    8,    8,    8,    8,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2
    } ;

static const flex_int16_t yy_base[517] =
    {   0,
        0,    0,  540, 2919, 2919, 2919, 2919,  524,  519,    0,
      509,  502, 2919,   60,  492,   71,  490, 2919,   57,  487,
      487,  125,  195,  261,   53,   58,  176,  229,   59,  307,
       60,   64,  263,  371,  283,   77,  417,  365,  300,  177,
      322,  369,  492,  466,  455,  440,  392, 2919,  194,    0,
        0,  380,  445,    0,  119,  372, 2919, 2919, 2919,   93,
      228, 2919,  236,  264,  378,  434,  427,  463,  318,  455,
       68,  487,    0,    0,  452,  270,  480,  493,  500,  516,
      508,  518,  521,  549,  545,  546,  566,  380,  574,  327,
      570,  576,  597,  577,  595,  604,  627,  620,  633,  629,

      636,  642,  665,  684,  678,  680,  697,  686,  708,  699,
      714,  719,  730,  749,  738,  792,  760,  779,  732,  782,
      801,  817,  823,  834,  842,  755,  839,  844,  869,  862,
      864,  867,  908,  897,  891,  910, 2919,  226,  366,    0,
      202,  895,  190,  311,   89,  914,  929,  935,  918,  946,
      953,  956,  957,  962,  964,  301,  264,   96,   99,  973,
      998,  991, 1011,  994, 1015,  995, 1039, 1046, 1049, 1050,
     1033, 1069, 1067, 1087, 1052, 1094, 1098, 1100, 1115, 1104,
     1121, 1132, 1139, 1136, 1154, 1156, 1159, 1167, 1175, 1184,
     1183, 1188, 1191, 1204, 1208, 1212, 1229, 1221, 1227, 1236,

     1242, 1264, 1270, 1265, 1273, 1275, 1281, 1288, 1298, 1294,
     1311, 1318, 1319, 1326, 1341, 1336, 1339, 1346, 1347, 1357,
     1370, 1364, 1385, 1391, 1401, 1394, 1422, 1393, 1429, 1426,
     1445, 1402, 1446, 1435, 1450,   85,    0,  350,  376, 1453,
      199,    0,  378,  175,  627,  263,  198, 1474, 1473, 1480,
     1493, 1482, 1495, 1502,  193, 2919,  221,  224,  206,  269,
     1512, 1529, 1504, 1545, 1532, 1534, 1553, 1550, 1540, 1563,
     1556, 1578, 1584, 1586, 1591, 1597, 1606, 1599, 1616, 1633,
     1636, 1643, 1644, 1638, 1651, 1672, 1653, 1668, 1671, 1689,
     1690, 1705, 1692, 1722, 1709, 1713, 1720, 1737, 1726, 1744,

     1755, 1759, 1772, 1764, 1779, 1782, 1815, 1788, 1807, 1817,
     1816, 1818, 1836, 1854, 1845, 1861, 1863, 1869, 1864, 1867,
      856,  334,  286, 1800, 1888, 1870, 1872, 1897, 1892, 1908,
     1916, 1913, 1919, 1924, 1944, 1949, 1921, 1954, 1946, 1951,
     1962, 1982, 1987, 1978, 2003, 2005, 1998, 2000, 2020, 2023,
     2030, 2028, 2041, 2047,  773, 2050, 2066, 2071, 2072, 2082,
     2089, 2091, 2102, 2110, 2134, 2121, 2099, 2138, 2140, 2145,
     2143, 2151, 2172, 2156,  186,  291,  419,  451,  339,  404,
      129,  537, 2162, 2189, 2187, 2190, 2192, 2207, 2217, 2225,
     2228, 2194, 2200, 2244, 2245, 2246, 2252, 2261, 2269, 2276,

     2293, 2277, 2280, 2296,  181, 2298, 2313, 2304, 2315, 2331,
     2328, 2334, 2349, 2351, 2350, 2352, 2356, 2379, 2359, 2384,
     2397,  543,  128,  600,  124, 2400, 2403, 2418, 2422, 2427,
     2416, 2452, 2455, 2472, 2454, 2463, 2461, 2470, 2476, 2479,
      232, 2504, 2483, 2506, 2513, 2514, 2507, 2517, 2522, 2542,
     2545, 2551, 2566, 2558, 2567, 2573, 2601, 2574, 2583, 2613,
     2604, 2919, 2617, 2612, 2610, 2619, 2635, 2640, 2656, 2639,
     2648, 2655, 2664, 2671, 2673,  260, 2692, 2694, 2698, 2700,
     2702, 2719, 2722, 2725,  322,  650, 2727, 2743, 2744, 2919,
     2746, 2749, 2764, 2766, 2771, 2781, 2774, 2782, 2779, 2919,

     2849, 2858, 2867, 2877,  133,  129,  128,  126, 2883, 2887,
     2894, 2899,  122,   74, 2905, 2908
    } ;

static const flex_int16_t yy_def[517] =
    {   0,
      500,    1,  500,  500,  500,  500,  500,  501,  502,  503,
      500,  500,  500,  500,  500,  500,  500,  500,  500,  500,
      500,  500,   22,   23,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,  501,  500,  502,  500,  500,  500,  500,  504,
      505,  500,  500,  506,  500,  500,  500,  500,  500,  500,
       24,  500,   24,   24,   24,   24,   24,   24,   24,   24,
      500,   24,  507,  508,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,

       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,  500,  500,  500,  504,
      509,  500,  510,  500,  500,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,  500,  500,  511,  512,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,

       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,  500,  513,  509,  509,  500,
      500,  514,  510,  500,  510,  500,  500,   24,   24,   24,
       24,   24,   24,   24,  500,  500,  511,  511,  512,  512,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,

       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
      500,  515,  516,  500,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,  500,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,  500,  500,  515,  515,  516,  516,
      500,  500,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,

       24,   24,   24,   24,  500,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,  500,  500,  500,  500,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
      500,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,  500,
       24,  500,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,  500,   24,   24,   24,   24,
       24,   24,   24,   24,  500,  307,   24,   24,   24,  500,
       24,   24,   24,   24,   24,   24,   24,   24,   24,    0,

      500,  500,  500,  500,  500,  500,  500,  500,  500,  500,
      500,  500,  500,  500,  500,  500
    } ;

static const flex_int16_t yy_nxt[2995] =
    {   0,
        4,    5,    6,    7,    8,    4,    4,    9,    7,   10,
        7,    7,   11,   12,   13,   14,    7,   15,   16,   17,
       18,   19,   20,   21,   22,   23,   24,   25,   26,   27,
       28,   29,   30,   29,   29,   31,   32,   33,   34,   35,
       36,   37,   38,   39,   40,   41,   42,   29,    4,    4,
       22,   23,   24,   25,   26,   27,   28,   29,   30,   29,
       29,   31,   32,   33,   34,   35,   36,   37,   38,   39,
       40,   41,   42,   29,    7,   50,   51,   61,   49,   58,
       48,  323,   61,   61,   96,   81,  156,   52,   99,   53,
       54,   82,   97,   83,   60,   84,   61,   61,   98,   55,

      256,  115,  100,   61,   85,  116,  256,  246,   61,   61,
       96,   81,   62,  321,   99,  117,  157,   82,   97,   83,
       56,   84,   61,   61,   98,   55,   60,  115,  100,  322,
       85,  116,  144,  159,  144,  158,  143,  145,  247,  321,
      141,  117,  424,   61,   62,  258,  422,  382,  260,   61,
       63,   64,   61,   61,   65,   61,   61,   61,   61,   61,
       66,   61,   67,   61,   61,   68,   69,   70,   61,   61,
       61,   61,   61,   71,   72,   61,   63,   64,   61,   61,
       65,   61,   61,   61,   61,   61,   66,   61,   67,   61,
       61,   68,   69,   70,   61,   61,   61,   61,   61,   73,

       61,  131,   74,  324,  376,  441,  242,  236,   86,  244,
       52,  255,  138,  256,   87,   61,  246,  240,  237,   88,
       61,   61,   55,   75,   61,  256,   61,  131,  500,  324,
       76,  441,   61,   77,   86,   61,   61,   61,   78,  245,
       87,   61,   52,  139,  138,   88,   61,   61,   55,   75,
       61,  239,   61,   61,   55,  260,   76,   89,   61,   77,
       61,   61,   61,   61,   78,  500,   61,   61,  500,   90,
      258,  462,   91,  500,   61,  139,  500,  146,   61,   61,
       55,  246,  255,   89,  485,   79,   61,  101,   61,   61,
      147,  102,   61,   61,   61,   90,   61,  462,   91,   80,

       61,  103,   61,  146,   61,  244,  104,  111,  161,  422,
      485,   79,  247,  101,   61,   61,  147,  102,  500,  156,
       61,  112,   61,  113,   61,   80,  114,  103,   61,  145,
       61,   61,  104,  111,  161,  380,   92,  129,   61,  236,
      423,  130,   61,   93,   94,   61,  132,  112,   95,  113,
       61,   61,  114,  133,  134,  236,   61,   61,  244,  154,
       61,  490,   92,  129,   61,  178,  237,  130,   61,   93,
       94,   61,  132,   73,   95,   73,   74,   61,   74,  133,
      134,  500,   61,  378,  138,  154,   61,  490,  380,   61,
       53,  178,  500,   61,  242,   61,  125,  244,  142,  239,

      105,  137,   61,  126,   61,  127,  135,  136,  106,   61,
      107,  108,  128,  109,  110,   61,   61,  176,   61,   61,
      148,   61,  125,  500,  236,  500,  105,  245,   61,  126,
       61,  127,  135,  136,  106,   61,  107,  108,  128,  109,
      110,   61,   61,  176,   61,  118,  148,   45,  119,  120,
       51,   61,  121,  500,  151,   61,  500,  122,   61,  123,
      124,   52,   46,   53,   54,   61,  149,   61,  378,  150,
       43,  118,   61,   55,  119,  120,   61,   61,  121,   61,
      151,   61,  160,  122,   61,  123,  124,   61,  500,  152,
       61,   61,  149,   61,   56,  150,   44,  155,   61,   55,

      500,   61,   61,  153,   61,   61,  500,  162,  160,   48,
       59,   61,   57,   61,   48,  152,   61,   61,   61,   61,
       49,   48,  163,  155,   61,   61,   46,   61,   44,  153,
       61,   61,   61,  162,  164,  500,  500,   61,   61,  500,
       61,  165,   61,   61,   61,   61,   61,  500,  163,  168,
       61,   61,  166,  167,   61,  424,   61,   61,   61,   61,
      164,  422,  170,  169,   61,  500,   61,  165,   61,   61,
       61,   61,   61,   61,  500,  168,  171,  173,  166,  167,
       61,  174,   61,   61,   61,   61,  425,   61,  170,  169,
       61,  172,  423,  500,  179,   61,   61,  500,   61,   61,

       61,   61,  171,  173,   61,  181,  175,  174,   61,   61,
       61,  177,   61,   61,   61,  182,   61,  172,  424,   61,
      179,   61,  500,  500,   61,  500,   61,   61,   61,  183,
       61,  181,  175,   61,   61,   61,  180,  177,   61,  500,
       61,  182,   61,  500,   61,   61,  500,   61,  500,  425,
      500,   61,  184,   61,   61,  183,  189,   61,  187,   61,
       61,   61,  180,  500,  185,   61,   61,   61,   61,  186,
       61,   61,  188,  190,   61,  500,  500,   61,  184,   61,
       61,  500,  189,   61,  187,   61,   61,  191,  192,   61,
      185,   61,   61,   61,  491,  186,  500,   61,  188,  190,

       61,  500,   61,   61,   61,  193,   61,  194,   61,  500,
       61,   61,  500,  191,  192,   61,   61,  500,   61,  195,
      491,   61,   61,   61,   61,  196,  500,  500,   61,   61,
       61,  193,   61,  194,   61,   61,   61,   61,   61,  197,
      199,  198,   61,   61,   61,  195,   61,   61,   61,   61,
       61,  196,   61,  500,   61,  500,  214,   61,   61,  200,
      201,   61,   61,   61,   61,  197,  199,  198,  202,   61,
       61,  500,   61,   61,  355,  204,   61,  500,   61,   61,
       61,  500,  214,   61,   61,  200,  201,   61,   61,  203,
      500,  500,   62,   61,  202,  210,   61,  500,   61,   61,

      211,  204,   61,   61,  500,   61,   61,  500,  500,  405,
       61,  500,  215,   61,  212,  203,   61,   61,  205,   61,
       61,  210,  206,  213,   61,  216,  211,  500,  207,   61,
       61,  208,   61,  500,  209,  405,  217,  500,  215,   61,
      212,  218,   61,   61,  205,  500,   61,   61,  206,  213,
      220,  216,  219,  500,  207,   61,   61,  208,   61,  221,
      209,   61,  217,  223,  500,   61,   61,  218,   61,  375,
      222,  375,   61,   61,  376,  500,  220,   61,  219,  500,
       61,   61,   61,  224,   61,  221,   61,   61,   61,  223,
      228,   61,   61,  225,   61,  500,  222,  500,   61,  230,

       61,  226,   61,   61,  229,   61,   61,   61,   61,  224,
      500,  227,   61,  240,   61,   61,  228,   61,  500,  225,
      500,   61,  500,   55,  500,  230,   61,  226,   61,  234,
      229,   61,   61,   61,   61,   61,  231,  227,   61,  233,
      232,   61,  250,  500,  241,  500,   61,   61,   61,   55,
      235,  500,   61,   61,  500,  234,   61,  248,   61,   61,
       61,   61,  231,  249,   61,  233,  232,   61,  250,  500,
       61,  500,   61,   61,   61,  500,  235,   61,   61,   61,
       61,  252,   61,  248,   61,   61,   61,  251,   61,  249,
      253,   61,  500,   61,   61,   61,   61,   61,  500,   61,

       61,  500,   61,   61,  254,  261,   61,  252,  500,  500,
       61,   61,   61,  251,   61,   61,  253,   61,   61,   61,
       61,   61,   61,   61,  262,  500,   61,  500,   61,   61,
      254,  261,   61,   61,  266,   61,   61,   61,  263,   61,
      264,   61,  500,  265,   61,   61,  500,  500,   61,   61,
      262,  500,  500,   61,  500,   61,  500,   61,   61,   61,
      266,   61,   61,   61,  263,   61,  264,  500,  267,  265,
       61,   61,  269,   61,   61,   61,   61,   61,  271,   61,
      268,  500,  272,   61,   61,  500,  270,   61,   61,   61,
       61,   61,  500,   61,  267,  500,   61,   61,  269,   61,

       61,  273,   61,   61,  271,   61,  268,   61,  272,  274,
       61,   61,  270,   61,   61,  275,   61,   61,   61,   61,
      276,  500,   61,  500,   61,   61,  277,  273,   61,  500,
      500,   61,   61,   61,  500,  274,   61,   61,   61,   61,
      500,  275,   61,  278,   61,   61,  276,  280,   61,  500,
       61,   61,  277,   61,   61,  279,   61,  500,   61,   61,
       61,  281,   61,   61,   61,   61,  500,  283,   61,  278,
       61,   61,  500,  280,   61,  282,  284,   61,   61,   61,
       61,  279,   61,   61,  286,   61,   61,  281,  285,   61,
      500,   61,   61,  283,   61,  500,   61,   61,  287,   61,

       61,  282,  284,   61,   61,   61,   61,   61,   61,   61,
      286,  288,   61,   61,  285,   61,  500,   61,   61,  500,
       61,   61,   61,   61,  287,   61,   61,  500,   61,   61,
      289,   61,   61,   61,   61,  500,   61,  288,   61,   61,
      500,   61,   61,  290,  500,   61,   61,   61,   61,  291,
       61,   61,   61,   61,   61,   61,  289,  292,   61,   61,
       61,  293,   61,  500,  500,   61,   61,   61,   61,  290,
      500,   61,   61,  500,   61,  291,   61,   61,  294,   61,
       61,  500,  500,  292,  295,   61,   61,  293,   61,   61,
      296,   61,   61,   61,   61,  298,  500,   61,  297,   61,

       61,  500,   61,   61,  294,   61,   61,  300,   61,  500,
      295,  299,   61,   61,   61,   61,  296,  500,   61,   61,
       61,  298,   61,   61,  297,   61,  301,  500,   61,   61,
      500,   61,   61,  300,   61,   61,   61,  299,   61,   61,
      500,  302,   61,   61,   61,   61,  303,  304,   61,   61,
       61,  500,  301,  500,  500,  500,   61,   61,   61,  500,
       61,   61,   61,   61,   61,   61,  305,  302,   61,   61,
       61,   61,  303,  304,   61,   61,   61,   61,  306,   61,
      500,   61,   61,   61,   61,   61,   61,  500,   61,   61,
       61,   61,  305,  500,   61,   61,   61,   61,  500,  500,

       61,  309,   61,   61,  306,   61,  307,   61,   61,   61,
       61,   61,  308,  500,   61,   61,  500,   61,   61,  311,
       61,   61,  310,   61,  500,   61,   61,  309,   61,   61,
      312,   61,   61,  500,   61,   61,  313,  318,  308,   61,
       61,   61,  500,   61,   61,  311,   61,  500,  310,   61,
       61,   61,   61,   61,  314,   61,  312,   61,   61,   61,
       61,  315,  313,  318,   61,   61,   61,   61,  316,   61,
       61,  240,   61,   61,   61,  320,   61,  319,  500,   61,
      314,   55,  317,   61,   61,   61,   61,  315,   61,  500,
       61,  500,  500,   61,  316,   61,   61,   61,   61,   61,

       61,  320,  241,  319,   61,  500,   61,   55,  317,   61,
       61,   61,   61,  326,   61,  325,  500,   61,   61,   61,
       61,  327,  500,   61,   61,  328,   61,  500,   61,  329,
       61,   61,   61,   61,  331,  330,   61,   61,   61,  326,
       61,  325,   61,   61,   61,   61,   61,  327,  500,  332,
       61,  328,   61,   61,   61,  329,   61,   61,   61,   61,
      331,  330,   61,  333,   61,  500,   61,   61,   61,   61,
       61,  500,  335,  334,   61,  332,   61,   61,  338,   61,
       61,  500,   61,   61,   61,  336,  500,   61,   61,  333,
       61,   61,  337,   61,   61,   61,   61,  500,  335,  334,

       61,   61,   61,   61,  338,  339,   61,  340,   61,   61,
       61,  336,  500,   61,   61,   61,   61,   61,  337,  500,
       61,   61,   61,   61,   61,  500,  341,   61,   61,   61,
       61,  339,  500,  340,   61,   61,   61,   61,  344,  342,
       61,   61,   61,  345,   61,  500,  343,   61,   61,   61,
       61,  500,  341,  500,   61,   61,   61,   61,  500,  500,
       61,   61,  350,   61,  344,  342,   61,   61,   61,  345,
       61,   61,  343,  346,   61,  351,   61,   61,  347,  349,
       61,   61,   61,   61,  500,  348,   61,  500,  350,   61,
      500,   61,   61,   61,   61,   61,   61,   61,  500,  346,

       61,  351,   61,   61,  347,  349,   61,   61,   61,   61,
       61,  348,  352,   61,   61,   61,  354,   61,   61,  500,
      500,   61,   61,  355,  500,  500,  500,   61,   61,   61,
       61,  500,   61,   61,  500,   61,   61,   61,  352,   61,
       61,  357,  354,   61,   61,  353,   61,   61,  356,  500,
       61,   61,  500,   61,   61,   61,   61,  500,   61,   61,
       61,   61,  500,   61,   61,  358,  359,  357,   61,   61,
       61,  353,   61,   61,  356,   61,   61,   61,  500,   61,
      500,  500,   61,   61,   61,  360,   61,   61,   61,  500,
       61,  358,  359,   61,   61,  361,   61,   61,  363,  362,

      500,   61,   61,   61,  364,   61,  366,  365,   61,   61,
       61,  360,   61,  381,   61,  381,  500,   61,  382,   61,
       61,  361,   61,   61,  363,  362,   61,  500,   61,   61,
      364,   61,  366,  365,  500,  368,   61,  500,   61,   61,
       61,   61,   61,   61,  500,   61,   61,  370,  500,  500,
      367,  500,   61,   61,   61,   61,   61,   61,  369,  500,
       61,  368,  500,  500,  500,   61,   61,   61,   61,  373,
      500,   61,  500,  370,   61,  500,  367,  371,   61,   61,
       61,   61,   61,   61,  369,   61,   61,   61,   61,  372,
      500,   61,   61,   61,   61,  373,   61,  374,  500,   61,

       61,   61,   61,  371,   61,   61,  500,   61,   61,   61,
       61,   61,   61,   61,   61,  372,   61,   61,   61,   61,
       61,   61,   61,  374,  500,   61,   61,   61,   61,  383,
       61,   61,   61,   61,   61,   61,   61,   61,   61,  384,
       61,  386,   61,   61,  500,  390,   61,   61,   61,  500,
      385,   61,   61,  500,   61,  383,   61,   61,   61,   61,
      500,   61,   61,   61,  387,  384,   61,  386,   61,   61,
       61,  390,   61,   61,   61,   61,  385,   61,   61,  389,
       61,  388,   61,   61,  392,   61,   61,   61,   61,   61,
      387,  391,   61,  500,   61,  500,   61,  500,  500,   61,

       61,   61,   61,  500,   61,  389,   61,  388,   61,  393,
      392,  395,   61,   61,  394,   61,   61,  391,   61,  396,
       61,  500,   61,  500,   61,   61,   61,   61,   61,   61,
      399,  397,   61,  398,  500,  393,   61,  395,   61,  500,
      394,   61,   61,   61,   61,  396,   61,   61,   61,  500,
       61,   61,  402,   61,   61,   61,  399,  397,   61,  398,
      401,   61,   61,  400,   61,   61,   61,   61,   61,   61,
       61,   61,  500,   61,   61,  500,  500,  404,  402,   61,
       61,  500,  403,  500,   61,   61,  401,   61,  406,  400,
       61,   61,   61,  407,   61,   61,   61,   61,  500,  409,

       61,  500,  500,  404,   61,   61,   61,  408,  403,   61,
       61,   61,  500,   61,  406,   61,   61,  500,  500,  407,
       61,   61,   61,   61,  410,  409,   61,   61,  412,   61,
       61,  411,   61,  408,   61,   61,   61,  417,  500,   61,
       61,   61,  414,  500,  413,   61,   61,  500,   61,   61,
      410,  500,   61,   61,  412,   61,  416,  411,   61,   61,
       61,  415,   61,  417,   61,  500,   61,   61,  414,   61,
      413,   61,   61,  420,   61,   61,   61,  418,   61,  419,
       61,   61,  416,   61,   61,   61,   61,  415,   61,   61,
       61,  500,  500,   61,   61,   61,   61,  421,   61,  420,

       61,   61,   61,  418,   61,  419,   61,   61,  500,   61,
       61,   61,   61,   61,   61,   61,   61,  426,   61,  500,
       61,  500,   61,  421,   61,   61,   61,   61,   61,  500,
       61,   61,   61,  427,  500,  428,   61,   61,   61,   61,
       61,   61,   61,  426,   61,   61,  500,  500,  500,   61,
       61,   61,   61,   61,   61,   61,   61,   61,   61,  427,
      429,  428,  430,   61,   61,  431,   61,   61,   61,   61,
       61,   61,  434,  500,  500,   61,   61,  500,   61,  435,
      500,   61,  432,   61,   61,   61,  429,  433,  430,   61,
       61,  431,   61,  436,   61,   61,   61,  500,  434,   61,

       61,   61,   61,  500,   61,  435,  500,   61,  432,   61,
       61,   61,  439,  433,   61,   61,   61,   61,   61,  436,
       61,  438,   61,  437,  440,   61,   61,   61,   61,  500,
       61,   61,  500,   61,   61,  442,   61,   61,  439,   61,
       61,   61,   61,   61,   61,  444,   61,  438,   61,  437,
      440,   61,   61,   61,   61,   61,  443,   61,   61,  445,
       61,  442,   61,   61,  500,   61,   61,  500,   61,   61,
      500,  444,   61,   61,   61,   61,   61,   61,   61,   61,
       61,   61,  443,   61,   61,  445,  447,   61,   61,   61,
       61,  500,   61,  446,   61,   61,  500,  449,   61,   61,

       61,   61,   61,   61,  500,  500,   61,  448,   61,   61,
      450,  500,  447,   61,   61,   61,   61,   61,  500,  446,
       61,   61,   61,  449,   61,  500,  452,   61,  500,   61,
      500,  500,  451,  448,   61,   61,  450,  500,   61,  500,
       61,   61,   61,   61,  457,  453,   61,   61,   61,  500,
       61,   61,  452,   61,   61,  454,   61,  500,  451,  500,
       61,   61,  455,  500,   61,   61,   61,   61,   61,  456,
      457,  453,   61,  460,  500,  500,   61,   61,   61,   61,
       61,  454,   61,  459,  500,   61,   61,   61,  455,  458,
       61,   61,   61,   61,   61,  456,   61,  500,  461,   61,

       61,   61,   61,   61,   61,   61,  500,   61,   61,  459,
       61,   61,  500,   61,   61,  458,   61,   61,   61,   61,
       61,   61,   61,  464,  461,   61,   61,   61,   61,   61,
       61,   61,  463,   61,   61,  500,   61,   61,   61,  467,
       61,   61,   61,   61,   61,   61,   61,   61,  500,  464,
      500,   61,   61,  465,   61,   61,   61,   61,  463,  500,
       61,  466,  468,   61,   61,  467,   61,   61,   61,   61,
       61,   61,   61,  470,  500,   61,  500,   61,   61,  465,
       61,   61,   61,   61,  469,  500,   61,  466,  468,   61,
       61,  474,   61,  471,  472,   61,   61,   61,   61,  470,

      473,   61,  500,  500,   61,   61,   61,   61,   61,   61,
      469,   61,   61,  500,  460,   61,   61,  474,  500,  471,
      472,   61,   61,   61,   61,   61,  473,  475,   61,  500,
       61,   61,   62,   61,   61,  500,   61,   61,   61,   61,
      478,   61,   61,   61,  477,  500,  500,   61,   61,  476,
       61,   61,  500,  475,   61,   61,  500,   61,  500,   61,
       61,  479,   61,   61,   61,   61,  478,   61,   61,   61,
      477,  500,   61,   61,   61,  476,   61,   61,   61,   61,
       61,   61,  480,   61,  481,   61,   61,  479,   61,   61,
       61,  482,  500,   61,   61,   61,  500,   61,   61,   61,

      500,  500,   61,   61,   61,   61,   61,  500,  480,   61,
      481,   61,   61,  483,   61,  484,   61,  482,   61,   61,
       61,   61,   61,   61,   61,  500,   61,  500,   61,  487,
       61,  500,   61,  500,  500,   61,   61,   61,   61,  483,
       61,  484,   61,   61,   61,  500,   61,  486,   61,   61,
       61,   61,   61,  500,  489,  487,   61,   61,   61,  488,
       61,  500,   61,   61,   61,   61,   61,   61,   61,   61,
       61,  492,   61,   61,  494,   61,  500,   61,  500,  500,
      489,   61,  493,   61,   61,  488,   61,   61,   61,   61,
       61,   61,  496,   61,   61,   61,   61,  492,   61,   61,

      494,  495,   61,   61,   61,   61,   61,   61,  493,   61,
       61,  500,  498,   61,   61,  500,   61,   61,  496,   61,
       61,   61,  499,  497,   61,  500,  500,  495,   61,   61,
       61,   61,   61,  500,  500,   61,  500,  500,  498,  500,
      500,  500,  500,   61,  500,   61,   61,  500,  499,  497,
       43,  500,   43,   43,   43,   43,   43,   43,   43,   45,
      500,   45,   45,   45,   45,   45,   45,   45,   47,  500,
       47,   47,   47,   47,   47,   47,   47,  140,  140,  500,
      140,  140,  140,  140,  140,  140,  140,  238,  500,  238,
      238,  500,  238,  243,  243,  243,  243,  257,  500,  500,

      500,  257,  500,  257,  259,  500,  259,  500,  259,  377,
      500,  500,  377,  500,  377,  379,  379,  379,    3,  500,
      500,  500,  500,  500,  500,  500,  500,  500,  500,  500,
      500,  500,  500,  500,  500,  500,  500,  500,  500,  500,
      500,  500,  500,  500,  500,  500,  500,  500,  500,  500,
      500,  500,  500,  500,  500,  500,  500,  500,  500,  500,
      500,  500,  500,  500,  500,  500,  500,  500,  500,  500,
      500,  500,  500,  500,  500,  500,  500,  500,  500,  500,
      500,  500,  500,  500,  500,  500,  500,  500,  500,  500,
      500,  500,  500,  500

    } ;

static const flex_int16_t yy_chk[2995] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,   14,   16,   25,   14,   19,
       19,  514,   26,   29,   31,   25,   71,   16,   32,   16,
       16,   25,   31,   26,   60,   26,   26,   29,   31,   16,

      158,   36,   32,   25,   26,   36,  159,  145,   26,   29,
       31,   25,   60,  236,   32,   36,   71,   25,   31,   26,
       16,   26,   26,   29,   31,   16,   22,   36,   32,  513,
       26,   36,   55,  508,   55,  507,  506,   55,  145,  236,
      505,   36,  425,   22,   22,  158,  423,  381,  159,   22,
       22,   22,   22,   22,   22,   22,   22,   22,   22,   22,
       22,   22,   22,   22,   22,   22,   22,   22,   22,   22,
       22,   22,   22,   22,   22,   22,   22,   22,   22,   22,
       22,   22,   22,   22,   22,   22,   22,   22,   22,   22,
       22,   22,   22,   22,   22,   22,   22,   22,   22,   23,

       27,   40,   23,  244,  375,  405,  143,  141,   27,  143,
       49,  255,   49,  259,   27,   40,  247,  241,  141,   27,
       23,   23,   49,   23,   23,  257,   27,   40,  258,  244,
       23,  405,   23,   23,   27,   23,   23,   23,   23,  143,
       27,   40,  138,   49,  138,   27,   23,   23,   49,   23,
       23,  141,   61,   28,  138,  259,   23,   28,   23,   23,
       63,   23,   23,   23,   23,   24,   61,   28,   24,   28,
      257,  441,   28,  258,   63,  138,  260,   63,   61,   28,
      138,  246,  157,   28,  476,   24,   63,   33,   64,   24,
       64,   33,   61,   28,   76,   28,   24,  441,   28,   24,

       63,   33,   64,   63,   24,  323,   33,   35,   76,  376,
      476,   24,  246,   33,   64,   24,   64,   33,  260,  156,
       76,   35,   24,   35,   39,   24,   35,   33,   64,  144,
       24,   30,   33,   35,   76,  323,   30,   39,   39,  322,
      376,   39,   69,   30,   30,   30,   41,   35,   30,   35,
       39,   90,   35,   41,   41,  238,   69,   30,  379,   69,
       41,  485,   30,   39,   39,   90,  238,   39,   69,   30,
       30,   30,   41,   42,   30,   34,   42,   90,   34,   41,
       41,  239,   69,  322,  139,   69,   41,  485,  379,   38,
       56,   90,  239,   42,  243,   34,   38,  243,   52,  238,

       34,   47,   65,   38,   88,   38,   42,   42,   34,   34,
       34,   34,   38,   34,   34,   38,   65,   88,   88,   42,
       65,   34,   38,  380,  377,  239,   34,  243,   65,   38,
       88,   38,   42,   42,   34,   34,   34,   34,   38,   34,
       34,   37,   65,   88,   88,   37,   65,   46,   37,   37,
       53,   67,   37,  380,   67,   37,  378,   37,   66,   37,
       37,   53,   45,   53,   53,   67,   66,   37,  377,   66,
       44,   37,   66,   53,   37,   37,   75,   67,   37,   70,
       67,   37,   75,   37,   66,   37,   37,   68,   72,   68,
       75,   67,   66,   70,   53,   66,   43,   70,   66,   53,

      378,   68,   75,   68,   77,   70,   72,   77,   75,   21,
       20,   72,   17,   68,   15,   68,   75,   78,   77,   70,
       12,   11,   78,   70,   79,   72,    9,   68,    8,   68,
       77,   78,   81,   77,   78,   72,   72,   72,   79,    3,
       80,   79,   82,   78,   77,   83,   81,    0,   78,   81,
       79,   72,   80,   80,   80,  382,   82,   78,   81,   83,
       78,  422,   83,   82,   79,    0,   80,   79,   82,   85,
       86,   83,   81,   84,    0,   81,   84,   85,   80,   80,
       80,   86,   82,   85,   86,   83,  382,   84,   83,   82,
       87,   84,  422,    0,   91,   85,   86,    0,   89,   84,

       92,   94,   84,   85,   87,   94,   87,   86,   91,   85,
       86,   89,   89,   84,   92,   94,   87,   84,  424,   95,
       91,   93,    0,    0,   89,    0,   92,   94,   96,   96,
       87,   94,   87,   95,   91,   93,   93,   89,   89,    0,
       92,   94,   96,  245,   98,   95,  245,   93,    0,  424,
        0,   97,   97,  100,   96,   96,  100,   99,   98,   95,
      101,   93,   93,    0,   97,   97,  102,  100,   96,   97,
       98,   99,   99,  101,  101,    0,  245,   97,   97,  100,
      102,    0,  100,   99,   98,  486,  101,  102,  102,  103,
       97,   97,  102,  100,  486,   97,    0,   99,   99,  101,

      101,    0,  105,  103,  106,  103,  102,  103,  104,    0,
      108,  486,    0,  102,  102,  103,  105,    0,  106,  104,
      486,  107,  104,  110,  108,  107,    0,    0,  105,  103,
      106,  103,  109,  103,  104,  107,  108,  110,  111,  109,
      111,  110,  105,  112,  106,  104,  109,  107,  104,  110,
      108,  107,  111,    0,  113,    0,  119,  112,  109,  112,
      112,  107,  115,  110,  111,  109,  111,  110,  113,  112,
      119,    0,  109,  114,  355,  115,  115,    0,  111,  126,
      113,    0,  119,  112,  117,  112,  112,  114,  115,  114,
        0,    0,  355,  126,  113,  117,  119,    0,  117,  114,

      117,  115,  115,  118,    0,  126,  120,    0,    0,  355,
      117,    0,  120,  114,  118,  114,  116,  118,  116,  126,
      120,  117,  116,  118,  117,  121,  117,    0,  116,  118,
      116,  116,  120,    0,  116,  355,  121,    0,  120,  121,
      118,  122,  116,  118,  116,    0,  120,  123,  116,  118,
      123,  121,  122,    0,  116,  122,  116,  116,  124,  124,
      116,  123,  121,  127,    0,  121,  125,  122,  128,  321,
      125,  321,  124,  123,  321,    0,  123,  127,  122,    0,
      125,  122,  128,  128,  124,  124,  130,  123,  131,  127,
      130,  132,  125,  129,  128,    0,  125,    0,  124,  132,

      130,  129,  131,  127,  131,  132,  125,  129,  128,  128,
        0,  129,  130,  142,  131,  135,  130,  132,    0,  129,
        0,  134,    0,  142,    0,  132,  130,  129,  131,  135,
      131,  132,  133,  129,  136,  134,  133,  129,  146,  134,
      133,  135,  149,    0,  142,    0,  133,  134,  136,  142,
      136,    0,  146,  147,    0,  135,  149,  147,  133,  148,
      136,  134,  133,  148,  146,  134,  133,  147,  149,    0,
      150,    0,  133,  148,  136,    0,  136,  151,  146,  147,
      152,  153,  149,  147,  150,  148,  154,  152,  155,  148,
      154,  151,    0,  147,  152,  153,  150,  160,    0,  148,

      154,    0,  155,  151,  155,  160,  152,  153,    0,    0,
      150,  160,  154,  152,  155,  162,  154,  151,  164,  166,
      152,  153,  161,  160,  161,    0,  154,    0,  155,  162,
      155,  160,  164,  166,  166,  163,  161,  160,  162,  165,
      163,  162,    0,  165,  164,  166,    0,    0,  161,  163,
      161,    0,    0,  165,    0,  162,    0,  171,  164,  166,
      166,  163,  161,  167,  162,  165,  163,    0,  167,  165,
      168,  171,  168,  169,  170,  163,  175,  167,  170,  165,
      167,    0,  170,  171,  168,    0,  169,  169,  170,  167,
      175,  173,    0,  172,  167,    0,  168,  171,  168,  169,

      170,  172,  175,  167,  170,  173,  167,  172,  170,  173,
      168,  174,  169,  169,  170,  174,  175,  173,  176,  172,
      176,    0,  177,    0,  178,  174,  177,  172,  180,    0,
        0,  173,  176,  172,    0,  173,  177,  174,  178,  179,
        0,  174,  180,  178,  176,  181,  176,  180,  177,    0,
      178,  174,  177,  179,  180,  179,  182,    0,  176,  181,
      184,  181,  177,  183,  178,  179,    0,  183,  180,  178,
      182,  181,    0,  180,  184,  182,  184,  183,  185,  179,
      186,  179,  182,  187,  186,  181,  184,  181,  185,  183,
        0,  188,  185,  183,  186,    0,  182,  187,  187,  189,

      184,  182,  184,  183,  185,  188,  186,  191,  190,  187,
      186,  190,  192,  189,  185,  193,    0,  188,  185,    0,
      186,  191,  190,  187,  187,  189,  192,    0,  194,  193,
      192,  188,  195,  191,  190,    0,  196,  190,  192,  189,
        0,  193,  194,  195,    0,  198,  195,  191,  190,  196,
      196,  199,  192,  197,  194,  193,  192,  197,  195,  198,
      200,  199,  196,    0,    0,  199,  201,  197,  194,  195,
        0,  198,  195,    0,  200,  196,  196,  199,  200,  197,
      201,    0,    0,  197,  201,  198,  200,  199,  202,  204,
      202,  199,  201,  197,  203,  204,    0,  205,  203,  206,

      200,    0,  202,  204,  200,  207,  201,  206,  203,    0,
      201,  205,  208,  206,  202,  204,  202,    0,  210,  207,
      203,  204,  209,  205,  203,  206,  208,    0,  202,  204,
        0,  207,  210,  206,  203,  211,  209,  205,  208,  206,
        0,  209,  212,  213,  210,  207,  212,  213,  209,  211,
      214,    0,  208,    0,    0,    0,  212,  213,  210,    0,
      216,  211,  209,  217,  214,  215,  214,  209,  212,  213,
      218,  219,  212,  213,  216,  211,  214,  217,  215,  215,
        0,  220,  212,  213,  218,  219,  216,    0,  222,  217,
      214,  215,  214,    0,  221,  220,  218,  219,    0,    0,

      216,  222,  222,  217,  215,  215,  220,  220,  221,  223,
      218,  219,  221,    0,  222,  224,    0,  228,  226,  224,
      221,  220,  223,  223,    0,  225,  232,  222,  222,  224,
      225,  228,  226,    0,  221,  223,  226,  232,  221,  225,
      232,  224,    0,  228,  226,  224,  227,    0,  223,  223,
      230,  225,  232,  229,  227,  224,  225,  228,  226,  234,
      227,  229,  226,  232,  230,  225,  232,  229,  230,  231,
      233,  240,  227,  234,  235,  234,  230,  233,    0,  229,
      227,  240,  231,  231,  233,  234,  227,  229,  235,    0,
      230,    0,    0,  229,  230,  231,  233,  249,  248,  234,

      235,  234,  240,  233,  250,    0,  252,  240,  231,  231,
      233,  249,  248,  249,  235,  248,    0,  251,  250,  253,
      252,  250,    0,  249,  248,  251,  254,    0,  263,  252,
      250,  251,  252,  253,  254,  253,  261,  249,  248,  249,
      254,  248,  263,  251,  250,  253,  252,  250,    0,  261,
      261,  251,  254,  262,  263,  252,  265,  251,  266,  253,
      254,  253,  261,  262,  269,    0,  254,  262,  263,  264,
      265,    0,  266,  264,  268,  261,  261,  267,  269,  262,
      271,    0,  265,  264,  266,  267,    0,  270,  268,  262,
      269,  267,  268,  262,  271,  264,  265,    0,  266,  264,

      268,  270,  272,  267,  269,  270,  271,  272,  273,  264,
      274,  267,    0,  270,  268,  275,  272,  267,  268,    0,
      271,  276,  273,  278,  274,    0,  273,  270,  272,  275,
      277,  270,    0,  272,  273,  276,  274,  278,  278,  276,
      279,  275,  272,  279,  277,    0,  277,  276,  273,  278,
      274,    0,  273,    0,  279,  275,  277,  280,    0,    0,
      281,  276,  284,  278,  278,  276,  279,  282,  283,  279,
      277,  280,  277,  280,  281,  285,  284,  287,  281,  283,
      279,  282,  283,  280,    0,  282,  281,    0,  284,  285,
        0,  287,  288,  282,  283,  289,  286,  280,    0,  280,

      281,  285,  284,  287,  281,  283,  288,  282,  283,  289,
      286,  282,  286,  290,  291,  285,  293,  287,  288,    0,
        0,  289,  286,  294,    0,    0,    0,  290,  291,  292,
      293,    0,  288,  295,    0,  289,  286,  296,  286,  290,
      291,  296,  293,  292,  297,  292,  294,  295,  295,    0,
      299,  296,    0,  290,  291,  292,  293,    0,  297,  295,
      294,  298,    0,  296,  299,  298,  299,  296,  300,  292,
      297,  292,  294,  295,  295,  298,  299,  296,    0,  301,
        0,    0,  300,  302,  297,  300,  294,  298,  304,    0,
      299,  298,  299,  301,  300,  301,  303,  302,  303,  302,

        0,  298,  304,  305,  304,  301,  306,  305,  300,  302,
      303,  300,  308,  324,  304,  324,  307,  305,  324,  301,
      306,  301,  303,  302,  303,  302,  308,    0,  304,  305,
      304,  309,  306,  305,  307,  308,  303,    0,  308,  307,
      311,  310,  312,  305,    0,  309,  306,  312,    0,    0,
      307,    0,  308,  307,  311,  310,  312,  309,  310,    0,
      313,  308,    0,  307,  307,  307,  311,  310,  312,  315,
        0,  309,    0,  312,  313,    0,  307,  313,  314,  307,
      311,  310,  312,  315,  310,  316,  313,  317,  319,  314,
        0,  320,  314,  318,  326,  315,  327,  318,    0,  316,

      313,  317,  319,  313,  314,  320,    0,  318,  326,  315,
      327,  316,  325,  317,  319,  314,  329,  320,  314,  318,
      326,  328,  327,  318,    0,  316,  325,  317,  319,  325,
      329,  320,  330,  318,  326,  328,  327,  332,  325,  328,
      331,  331,  329,  333,    0,  337,  330,  328,  334,    0,
      330,  332,  325,    0,  331,  325,  329,  333,  330,  337,
        0,  328,  334,  332,  334,  328,  331,  331,  335,  333,
      339,  337,  330,  336,  334,  340,  330,  332,  338,  336,
      331,  335,  335,  333,  339,  337,  341,  336,  334,  340,
      334,  338,  338,    0,  335,    0,  339,    0,    0,  336,

      341,  340,  344,    0,  338,  336,  342,  335,  335,  341,
      339,  343,  341,  336,  342,  340,  344,  338,  338,  343,
      342,    0,  347,    0,  348,  343,  341,  345,  344,  346,
      347,  345,  342,  346,    0,  341,  347,  343,  348,    0,
      342,  345,  344,  346,  349,  343,  342,  350,  347,    0,
      348,  343,  352,  345,  351,  346,  347,  345,  349,  346,
      351,  350,  347,  350,  348,  353,  352,  345,  351,  346,
      349,  354,    0,  350,  356,    0,    0,  354,  352,  353,
      351,    0,  353,    0,  349,  354,  351,  350,  356,  350,
      357,  353,  352,  357,  351,  358,  359,  354,    0,  359,

      356,    0,    0,  354,  357,  353,  360,  357,  353,  358,
      359,  354,    0,  361,  356,  362,  357,    0,    0,  357,
      360,  358,  359,  367,  360,  359,  363,  361,  362,  362,
      357,  361,  360,  357,  364,  358,  359,  367,    0,  361,
      363,  362,  364,    0,  363,  366,  360,    0,  364,  367,
      360,    0,  363,  361,  362,  362,  366,  361,  365,  366,
      364,  365,  368,  367,  369,    0,  363,  371,  364,  370,
      363,  366,  365,  370,  364,  372,  368,  368,  369,  369,
      374,  371,  366,  370,  365,  366,  383,  365,  368,  372,
      369,    0,    0,  371,  374,  370,  373,  373,  365,  370,

      383,  372,  368,  368,  369,  369,  374,  371,    0,  370,
      373,  385,  383,  384,  386,  372,  387,  384,  392,    0,
      374,    0,  373,  373,  393,  385,  383,  384,  386,    0,
      387,  388,  392,  386,    0,  388,  373,  385,  393,  384,
      386,  389,  387,  384,  392,  388,    0,    0,    0,  390,
      393,  385,  391,  384,  386,  389,  387,  388,  392,  386,
      389,  388,  390,  390,  393,  391,  391,  389,  394,  395,
      396,  388,  396,    0,    0,  390,  397,    0,  391,  397,
        0,  389,  394,  395,  396,  398,  389,  395,  390,  390,
      397,  391,  391,  399,  394,  395,  396,    0,  396,  398,

      400,  402,  397,    0,  403,  397,    0,  399,  394,  395,
      396,  398,  402,  395,  400,  402,  397,  401,  403,  399,
      404,  401,  406,  400,  404,  398,  400,  402,  408,    0,
      403,  401,    0,  399,  404,  406,  406,  407,  402,  409,
      400,  402,  408,  401,  403,  408,  404,  401,  406,  400,
      404,  407,  411,  409,  408,  410,  407,  401,  412,  410,
      404,  406,  406,  407,    0,  409,  411,    0,  408,  410,
        0,  408,  412,  413,  415,  414,  416,  407,  411,  409,
      417,  410,  407,  419,  412,  410,  417,  413,  415,  414,
      416,    0,  411,  414,  417,  410,    0,  419,  412,  413,

      415,  414,  416,  418,    0,    0,  417,  418,  420,  419,
      420,    0,  417,  413,  415,  414,  416,  418,    0,  414,
      417,  421,  420,  419,  426,    0,  426,  427,    0,  418,
        0,    0,  421,  418,  420,  421,  420,    0,  426,    0,
      431,  427,  428,  418,  431,  427,  429,  421,  420,    0,
      426,  430,  426,  427,  431,  428,  428,    0,  421,    0,
      429,  421,  429,    0,  426,  430,  431,  427,  428,  430,
      431,  427,  429,  434,    0,    0,  432,  430,  435,  433,
      431,  428,  428,  433,    0,  437,  429,  436,  429,  432,
      432,  430,  435,  433,  438,  430,  434,    0,  436,  437,

      439,  436,  432,  440,  435,  433,    0,  443,  438,  433,
      434,  437,    0,  436,  439,  432,  432,  440,  435,  433,
      438,  443,  434,  443,  436,  437,  439,  436,  442,  440,
      444,  447,  442,  443,  438,    0,  434,  445,  446,  447,
      439,  448,  442,  440,  444,  447,  449,  443,    0,  443,
        0,  445,  446,  445,  442,  448,  444,  447,  442,    0,
      449,  446,  449,  445,  446,  447,  450,  448,  442,  451,
      444,  447,  449,  451,    0,  452,    0,  445,  446,  445,
      450,  448,  454,  451,  450,    0,  449,  446,  449,  452,
      453,  455,  450,  452,  453,  451,  454,  456,  458,  451,

      454,  452,    0,    0,  453,  455,  450,  459,  454,  451,
      450,  456,  458,    0,  460,  452,  453,  455,    0,  452,
      453,  459,  454,  456,  458,  457,  454,  457,  461,    0,
      453,  455,  460,  459,  465,    0,  464,  456,  458,  457,
      464,  463,  461,  466,  463,    0,    0,  459,  465,  460,
      464,  457,    0,  457,  461,  463,    0,  466,    0,  467,
      465,  467,  464,  470,  468,  457,  464,  463,  461,  466,
      463,    0,  471,  467,  465,  460,  464,  470,  468,  472,
      469,  463,  468,  466,  469,  467,  471,  467,  473,  470,
      468,  471,    0,  472,  469,  474,    0,  475,  471,  467,

        0,    0,  473,  470,  468,  472,  469,    0,  468,  474,
      469,  475,  471,  474,  473,  475,  477,  471,  478,  472,
      469,  474,  479,  475,  480,    0,  481,    0,  473,  481,
      477,    0,  478,    0,    0,  474,  479,  475,  480,  474,
      481,  475,  477,  482,  478,    0,  483,  479,  479,  484,
      480,  487,  481,    0,  483,  481,  477,  482,  478,  482,
      483,    0,  479,  484,  480,  487,  481,  488,  489,  482,
      491,  488,  483,  492,  491,  484,    0,  487,    0,    0,
      483,  488,  489,  482,  491,  482,  483,  492,  493,  484,
      494,  487,  494,  488,  489,  495,  491,  488,  497,  492,

      491,  493,  493,  499,  494,  496,  498,  488,  489,  495,
      491,    0,  497,  492,  493,    0,  494,  499,  494,  496,
      498,  495,  498,  496,  497,    0,    0,  493,  493,  499,
      494,  496,  498,    0,    0,  495,    0,    0,  497,    0,
        0,    0,    0,  499,    0,  496,  498,    0,  498,  496,
      501,    0,  501,  501,  501,  501,  501,  501,  501,  502,
        0,  502,  502,  502,  502,  502,  502,  502,  503,    0,
      503,  503,  503,  503,  503,  503,  503,  504,  504,    0,
      504,  504,  504,  504,  504,  504,  504,  509,    0,  509,
      509,    0,  509,  510,  510,  510,  510,  511,    0,    0,

        0,  511,    0,  511,  512,    0,  512,    0,  512,  515,
        0,    0,  515,    0,  515,  516,  516,  516,  500,  500,
      500,  500,  500,  500,  500,  500,  500,  500,  500,  500,
      500,  500,  500,  500,  500,  500,  500,  500,  500,  500,
      500,  500,  500,  500,  500,  500,  500,  500,  500,  500,
      500,  500,  500,  500,  500,  500,  500,  500,  500,  500,
      500,  500,  500,  500,  500,  500,  500,  500,  500,  500,
      500,  500,  500,  500,  500,  500,  500,  500,  500,  500,
      500,  500,  500,  500,  500,  500,  500,  500,  500,  500,
      500,  500,  500,  500

    } ;

/* Table of booleans, true if rule could match eol. */
static const flex_int32_t yy_rule_can_match_eol[119] =
    {   0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,     };

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "/home/binaryman/Documents/PhD/flopoco/src/VHDLLexerRule.l"
#line 8 "/home/binaryman/Documents/PhD/flopoco/src/VHDLLexerRule.l"
	#include "LexerContext.hpp"
	#include "Operator.hpp"
	#include <stdio.h>
	#include <iostream>
	#include <string.h>
	#include <utility>
	#include <vector>
	#include <ctype.h>
	#include <map>
	
	using namespace flopoco;

	#define YY_EXTRA_TYPE LexerContext*
	#define YY_INPUT(buf, result, max_size) {\
		char c; \
		(*yyextra->is).get(c); \
		if (yyextra->is->eof()) \
			result = YY_NULL; \
		else { \
			buf[0] = c; \
			result = 1; \
		}\
	}


#line 1517 "/home/binaryman/Documents/PhD/flopoco/build/VHDLLexer.cpp"
#line 1518 "/home/binaryman/Documents/PhD/flopoco/build/VHDLLexer.cpp"

#define INITIAL 0

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* Holds the entire state of the reentrant scanner. */
struct yyguts_t
    {

    /* User-defined. Not touched by flex. */
    YY_EXTRA_TYPE yyextra_r;

    /* The rest are the same as the globals declared in the non-reentrant scanner. */
    FILE *yyin_r, *yyout_r;
    size_t yy_buffer_stack_top; /**< index of top of stack. */
    size_t yy_buffer_stack_max; /**< capacity of stack. */
    YY_BUFFER_STATE * yy_buffer_stack; /**< Stack as an array. */
    char yy_hold_char;
    int yy_n_chars;
    int yyleng_r;
    char *yy_c_buf_p;
    int yy_init;
    int yy_start;
    int yy_did_buffer_switch_on_eof;
    int yy_start_stack_ptr;
    int yy_start_stack_depth;
    int *yy_start_stack;
    yy_state_type yy_last_accepting_state;
    char* yy_last_accepting_cpos;

    int yylineno_r;
    int yy_flex_debug_r;

    char *yytext_r;
    int yy_more_flag;
    int yy_more_len;

    }; /* end struct yyguts_t */

static int yy_init_globals ( yyscan_t yyscanner );

int yylex_init (yyscan_t* scanner);

int yylex_init_extra ( YY_EXTRA_TYPE user_defined, yyscan_t* scanner);

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy ( yyscan_t yyscanner );

int yyget_debug ( yyscan_t yyscanner );

void yyset_debug ( int debug_flag , yyscan_t yyscanner );

YY_EXTRA_TYPE yyget_extra ( yyscan_t yyscanner );

void yyset_extra ( YY_EXTRA_TYPE user_defined , yyscan_t yyscanner );

FILE *yyget_in ( yyscan_t yyscanner );

void yyset_in  ( FILE * _in_str , yyscan_t yyscanner );

FILE *yyget_out ( yyscan_t yyscanner );

void yyset_out  ( FILE * _out_str , yyscan_t yyscanner );

			int yyget_leng ( yyscan_t yyscanner );

char *yyget_text ( yyscan_t yyscanner );

int yyget_lineno ( yyscan_t yyscanner );

void yyset_lineno ( int _line_number , yyscan_t yyscanner );

int yyget_column  ( yyscan_t yyscanner );

void yyset_column ( int _column_no , yyscan_t yyscanner );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap ( yyscan_t yyscanner );
#else
extern int yywrap ( yyscan_t yyscanner );
#endif
#endif

#ifndef YY_NO_UNPUT
    
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int , yyscan_t yyscanner);
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * , yyscan_t yyscanner);
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput ( yyscan_t yyscanner );
#else
static int input ( yyscan_t yyscanner );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, (size_t) yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		int n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = (int) fread(buf, 1, (yy_size_t) max_size, yyin)) == 0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg , yyscanner)
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex (yyscan_t yyscanner);

#define YY_DECL int yylex (yyscan_t yyscanner)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( !yyg->yy_init )
		{
		yyg->yy_init = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yyg->yy_start )
			yyg->yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack (yyscanner);
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner);
		}

		yy_load_buffer_state( yyscanner );
		}

	{
#line 90 "/home/binaryman/Documents/PhD/flopoco/src/VHDLLexerRule.l"


#line 1779 "/home/binaryman/Documents/PhD/flopoco/build/VHDLLexer.cpp"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yyg->yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yyg->yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yyg->yy_start;
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				yyg->yy_last_accepting_state = yy_current_state;
				yyg->yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 501 )
					yy_c = yy_meta[yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 2919 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					
    do{ yylineno++;
        yycolumn=0;
    }while(0)
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yyg->yy_hold_char;
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			goto yy_find_action;

case 1:
#line 93 "/home/binaryman/Documents/PhD/flopoco/src/VHDLLexerRule.l"
case 2:
#line 94 "/home/binaryman/Documents/PhD/flopoco/src/VHDLLexerRule.l"
case 3:
#line 95 "/home/binaryman/Documents/PhD/flopoco/src/VHDLLexerRule.l"
case 4:
#line 96 "/home/binaryman/Documents/PhD/flopoco/src/VHDLLexerRule.l"
case 5:
#line 97 "/home/binaryman/Documents/PhD/flopoco/src/VHDLLexerRule.l"
case 6:
#line 98 "/home/binaryman/Documents/PhD/flopoco/src/VHDLLexerRule.l"
case 7:
#line 99 "/home/binaryman/Documents/PhD/flopoco/src/VHDLLexerRule.l"
case 8:
#line 100 "/home/binaryman/Documents/PhD/flopoco/src/VHDLLexerRule.l"
case 9:
#line 101 "/home/binaryman/Documents/PhD/flopoco/src/VHDLLexerRule.l"
case 10:
#line 102 "/home/binaryman/Documents/PhD/flopoco/src/VHDLLexerRule.l"
case 11:
#line 103 "/home/binaryman/Documents/PhD/flopoco/src/VHDLLexerRule.l"
case 12:
#line 104 "/home/binaryman/Documents/PhD/flopoco/src/VHDLLexerRule.l"
case 13:
#line 105 "/home/binaryman/Documents/PhD/flopoco/src/VHDLLexerRule.l"
case 14:
#line 106 "/home/binaryman/Documents/PhD/flopoco/src/VHDLLexerRule.l"
case 15:
#line 107 "/home/binaryman/Documents/PhD/flopoco/src/VHDLLexerRule.l"
case 16:
#line 108 "/home/binaryman/Documents/PhD/flopoco/src/VHDLLexerRule.l"
case 17:
#line 109 "/home/binaryman/Documents/PhD/flopoco/src/VHDLLexerRule.l"
case 18:
#line 110 "/home/binaryman/Documents/PhD/flopoco/src/VHDLLexerRule.l"
case 19:
#line 111 "/home/binaryman/Documents/PhD/flopoco/src/VHDLLexerRule.l"
case 20:
#line 112 "/home/binaryman/Documents/PhD/flopoco/src/VHDLLexerRule.l"
case 21:
#line 113 "/home/binaryman/Documents/PhD/flopoco/src/VHDLLexerRule.l"
case 22:
#line 114 "/home/binaryman/Documents/PhD/flopoco/src/VHDLLexerRule.l"
case 23:
#line 115 "/home/binaryman/Documents/PhD/flopoco/src/VHDLLexerRule.l"
case 24:
#line 116 "/home/binaryman/Documents/PhD/flopoco/src/VHDLLexerRule.l"
case 25:
#line 117 "/home/binaryman/Documents/PhD/flopoco/src/VHDLLexerRule.l"
case 26:
#line 118 "/home/binaryman/Documents/PhD/flopoco/src/VHDLLexerRule.l"
case 27:
#line 119 "/home/binaryman/Documents/PhD/flopoco/src/VHDLLexerRule.l"
case 28:
#line 120 "/home/binaryman/Documents/PhD/flopoco/src/VHDLLexerRule.l"
case 29:
#line 121 "/home/binaryman/Documents/PhD/flopoco/src/VHDLLexerRule.l"
case 30:
#line 122 "/home/binaryman/Documents/PhD/flopoco/src/VHDLLexerRule.l"
case 31:
#line 123 "/home/binaryman/Documents/PhD/flopoco/src/VHDLLexerRule.l"
case 32:
#line 124 "/home/binaryman/Documents/PhD/flopoco/src/VHDLLexerRule.l"
case 33:
#line 125 "/home/binaryman/Documents/PhD/flopoco/src/VHDLLexerRule.l"
case 34:
#line 126 "/home/binaryman/Documents/PhD/flopoco/src/VHDLLexerRule.l"
case 35:
#line 127 "/home/binaryman/Documents/PhD/flopoco/src/VHDLLexerRule.l"
case 36:
#line 128 "/home/binaryman/Documents/PhD/flopoco/src/VHDLLexerRule.l"
case 37:
#line 129 "/home/binaryman/Documents/PhD/flopoco/src/VHDLLexerRule.l"
case 38:
#line 130 "/home/binaryman/Documents/PhD/flopoco/src/VHDLLexerRule.l"
case 39:
#line 131 "/home/binaryman/Documents/PhD/flopoco/src/VHDLLexerRule.l"
case 40:
#line 132 "/home/binaryman/Documents/PhD/flopoco/src/VHDLLexerRule.l"
case 41:
#line 133 "/home/binaryman/Documents/PhD/flopoco/src/VHDLLexerRule.l"
case 42:
#line 134 "/home/binaryman/Documents/PhD/flopoco/src/VHDLLexerRule.l"
case 43:
#line 135 "/home/binaryman/Documents/PhD/flopoco/src/VHDLLexerRule.l"
case 44:
#line 136 "/home/binaryman/Documents/PhD/flopoco/src/VHDLLexerRule.l"
case 45:
#line 137 "/home/binaryman/Documents/PhD/flopoco/src/VHDLLexerRule.l"
case 46:
#line 138 "/home/binaryman/Documents/PhD/flopoco/src/VHDLLexerRule.l"
case 47:
#line 139 "/home/binaryman/Documents/PhD/flopoco/src/VHDLLexerRule.l"
case 48:
#line 140 "/home/binaryman/Documents/PhD/flopoco/src/VHDLLexerRule.l"
case 49:
#line 141 "/home/binaryman/Documents/PhD/flopoco/src/VHDLLexerRule.l"
case 50:
#line 142 "/home/binaryman/Documents/PhD/flopoco/src/VHDLLexerRule.l"
case 51:
#line 143 "/home/binaryman/Documents/PhD/flopoco/src/VHDLLexerRule.l"
case 52:
#line 144 "/home/binaryman/Documents/PhD/flopoco/src/VHDLLexerRule.l"
case 53:
#line 145 "/home/binaryman/Documents/PhD/flopoco/src/VHDLLexerRule.l"
case 54:
#line 146 "/home/binaryman/Documents/PhD/flopoco/src/VHDLLexerRule.l"
case 55:
#line 147 "/home/binaryman/Documents/PhD/flopoco/src/VHDLLexerRule.l"
case 56:
#line 148 "/home/binaryman/Documents/PhD/flopoco/src/VHDLLexerRule.l"
case 57:
#line 149 "/home/binaryman/Documents/PhD/flopoco/src/VHDLLexerRule.l"
case 58:
#line 150 "/home/binaryman/Documents/PhD/flopoco/src/VHDLLexerRule.l"
case 59:
#line 151 "/home/binaryman/Documents/PhD/flopoco/src/VHDLLexerRule.l"
case 60:
#line 152 "/home/binaryman/Documents/PhD/flopoco/src/VHDLLexerRule.l"
case 61:
#line 153 "/home/binaryman/Documents/PhD/flopoco/src/VHDLLexerRule.l"
case 62:
#line 154 "/home/binaryman/Documents/PhD/flopoco/src/VHDLLexerRule.l"
case 63:
#line 155 "/home/binaryman/Documents/PhD/flopoco/src/VHDLLexerRule.l"
case 64:
#line 156 "/home/binaryman/Documents/PhD/flopoco/src/VHDLLexerRule.l"
case 65:
#line 157 "/home/binaryman/Documents/PhD/flopoco/src/VHDLLexerRule.l"
case 66:
#line 158 "/home/binaryman/Documents/PhD/flopoco/src/VHDLLexerRule.l"
case 67:
#line 159 "/home/binaryman/Documents/PhD/flopoco/src/VHDLLexerRule.l"
case 68:
#line 160 "/home/binaryman/Documents/PhD/flopoco/src/VHDLLexerRule.l"
case 69:
#line 161 "/home/binaryman/Documents/PhD/flopoco/src/VHDLLexerRule.l"
case 70:
#line 162 "/home/binaryman/Documents/PhD/flopoco/src/VHDLLexerRule.l"
case 71:
#line 163 "/home/binaryman/Documents/PhD/flopoco/src/VHDLLexerRule.l"
case 72:
#line 164 "/home/binaryman/Documents/PhD/flopoco/src/VHDLLexerRule.l"
case 73:
#line 165 "/home/binaryman/Documents/PhD/flopoco/src/VHDLLexerRule.l"
case 74:
#line 166 "/home/binaryman/Documents/PhD/flopoco/src/VHDLLexerRule.l"
case 75:
#line 167 "/home/binaryman/Documents/PhD/flopoco/src/VHDLLexerRule.l"
case 76:
#line 168 "/home/binaryman/Documents/PhD/flopoco/src/VHDLLexerRule.l"
case 77:
#line 169 "/home/binaryman/Documents/PhD/flopoco/src/VHDLLexerRule.l"
case 78:
#line 170 "/home/binaryman/Documents/PhD/flopoco/src/VHDLLexerRule.l"
case 79:
#line 171 "/home/binaryman/Documents/PhD/flopoco/src/VHDLLexerRule.l"
case 80:
#line 172 "/home/binaryman/Documents/PhD/flopoco/src/VHDLLexerRule.l"
case 81:
#line 173 "/home/binaryman/Documents/PhD/flopoco/src/VHDLLexerRule.l"
case 82:
#line 174 "/home/binaryman/Documents/PhD/flopoco/src/VHDLLexerRule.l"
case 83:
#line 175 "/home/binaryman/Documents/PhD/flopoco/src/VHDLLexerRule.l"
case 84:
#line 176 "/home/binaryman/Documents/PhD/flopoco/src/VHDLLexerRule.l"
case 85:
#line 177 "/home/binaryman/Documents/PhD/flopoco/src/VHDLLexerRule.l"
case 86:
#line 178 "/home/binaryman/Documents/PhD/flopoco/src/VHDLLexerRule.l"
case 87:
#line 179 "/home/binaryman/Documents/PhD/flopoco/src/VHDLLexerRule.l"
case 88:
#line 180 "/home/binaryman/Documents/PhD/flopoco/src/VHDLLexerRule.l"
case 89:
#line 181 "/home/binaryman/Documents/PhD/flopoco/src/VHDLLexerRule.l"
case 90:
#line 182 "/home/binaryman/Documents/PhD/flopoco/src/VHDLLexerRule.l"
case 91:
#line 183 "/home/binaryman/Documents/PhD/flopoco/src/VHDLLexerRule.l"
case 92:
#line 184 "/home/binaryman/Documents/PhD/flopoco/src/VHDLLexerRule.l"
case 93:
YY_RULE_SETUP
#line 184 "/home/binaryman/Documents/PhD/flopoco/src/VHDLLexerRule.l"
{ 
    (*yyextra->os) << yytext;
}
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 188 "/home/binaryman/Documents/PhD/flopoco/src/VHDLLexerRule.l"
{ 
	(*yyextra->os) << yytext;
}
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 192 "/home/binaryman/Documents/PhD/flopoco/src/VHDLLexerRule.l"
{ 
	(*yyextra->os) << yytext;
	
	//check for possible errors in the VHDL code
	//	to be in this case, the ';' was probably omitted
	if(*yyextra->lexingMode == LexerContext::signalAssignment)
	{
		throw(string("something went wrong during the first parsing of the VHDL code!\nPlease check your VHDL code!"));
	}
	
	if(*yyextra->lexingMode == LexerContext::unset)
	{
		*yyextra->lexingMode = LexerContext::signalAssignment;
	}
	
	if(*yyextra->lexingMode == LexerContext::selectedSignalAssignment2)
	{
		*yyextra->lexingMode = LexerContext::selectedSignalAssignment3;
	}
}
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 213 "/home/binaryman/Documents/PhD/flopoco/src/VHDLLexerRule.l"
{
	(*yyextra->os) << yytext;
	
	yyextra->extraRhsNames->clear();
	*yyextra->lexingMode = LexerContext::variableAssignment;
	*yyextra->lhsName = "";
}
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 222 "/home/binaryman/Documents/PhD/flopoco/src/VHDLLexerRule.l"
{
    //the left-hand side signal itself is marked, instead of putting it at the end of the statement
	for(int i=0; (unsigned)i<yyextra->extraRhsNames->size(); i++)
	{
		triplet<string, string, int> tempTriplet;

		tempTriplet.first = *yyextra->lhsName;
		tempTriplet.second = (*yyextra->extraRhsNames)[i];
		tempTriplet.third = 0;

		yyextra->dependenceTable->push_back(tempTriplet);
	}
	yyextra->extraRhsNames->clear();
	*yyextra->lexingMode = LexerContext::unset;
	*yyextra->lexingModeOld = LexerContext::unset;
	*yyextra->lhsName = "";
	
	*yyextra->isLhsSet = false;
	
	(*yyextra->os) << yytext;

}
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 246 "/home/binaryman/Documents/PhD/flopoco/src/VHDLLexerRule.l"
{
// When can appear in the following situations:
//   1/  with X select Y <=  toto when tata,
//                     where we arive in selectedSignalAssignment mode
//   2/  Y <=  toto when tata = '1' else    titi;
//  where we arrive in signalAssignment
	(*yyextra->os) << yytext;
	
	if(*yyextra->lexingMode != LexerContext::selectedSignalAssignment)
	{
		*yyextra->lexingMode = LexerContext::conditionalSignalAssignment;
	}
}
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 261 "/home/binaryman/Documents/PhD/flopoco/src/VHDLLexerRule.l"
{
	(*yyextra->os) << yytext;
	
	*yyextra->lexingMode = LexerContext::selectedSignalAssignment;
}
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 268 "/home/binaryman/Documents/PhD/flopoco/src/VHDLLexerRule.l"
{
	(*yyextra->os) << " select "; // we add two spaces and force lowercase to make the select keyword easier to identify from c++
	
	*yyextra->lexingMode = LexerContext::selectedSignalAssignment2;
}
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 275 "/home/binaryman/Documents/PhD/flopoco/src/VHDLLexerRule.l"
{
	(*yyextra->os) << yytext;
	
	*yyextra->lexingMode = LexerContext::portmap;
	*yyextra->lhsName = "";
	yyextra->extraRhsNames->clear();
}
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 283 "/home/binaryman/Documents/PhD/flopoco/src/VHDLLexerRule.l"
{
	(*yyextra->os) << yytext;
	
	*yyextra->lexingMode = LexerContext::genericmap;
	*yyextra->lhsName = "";
	yyextra->extraRhsNames->clear();
}
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 292 "/home/binaryman/Documents/PhD/flopoco/src/VHDLLexerRule.l"
{
	(*yyextra->os) << yytext;
	
	*yyextra->lexingMode = LexerContext::caseStatement;
	*yyextra->lhsName = "";
	yyextra->extraRhsNames->clear();
}
	YY_BREAK
case 104:
#line 302 "/home/binaryman/Documents/PhD/flopoco/src/VHDLLexerRule.l"
case 105:
#line 303 "/home/binaryman/Documents/PhD/flopoco/src/VHDLLexerRule.l"
case 106:
YY_RULE_SETUP
#line 303 "/home/binaryman/Documents/PhD/flopoco/src/VHDLLexerRule.l"
{
	//identified either "signal_name"
  // REMOVED BY FLORENT, it was parsing as $$(signal)$$ and I don't see the point
  // or "(signal_name, signal_name...)" there was this rule
  // "("({space_character})*{identifier}(({space_character})*","({space_character})*{identifier})*({space_character})*")"
	//this can be either the left or the right hand side
	//if the mode is unset, then this is the new left hand side
	//	the mode itself is going to be set when encountering the "<=" symbol
	//if the mode is already set, then act accordingly
	//	if in signalAssignment mode, then this is a signal on the right hand side; store a new pair in the dependenceTable, mark the symbol for the second pass
	//	if in conditionalSignalAssignment mode, c.f. signalAssignment mode
	//	if in selectedSignalAssignment mode, then if the mode is unset this signal is stored and added later to the dependence table, else c.f. signalAssignment mode
	//	for all other cases, just copy the code to the output stream and don't perform any other action
	
  try {yyextra->op->getSignalByName(yytext);}
  catch(string &e){ 
     //cerr << "identifier '" << yytext << "' is not a declared signal" << endl;
			}
	if(*yyextra->lexingMode == LexerContext::unset)
	{
		// this is the left hand side of the assignment
		(*yyextra->os) << "??" << yytext << "??";
		
		if(*yyextra->lhsName == "")
		{
			*yyextra->lhsName = yytext;
		}
		
		if(*yyextra->isLhsSet == true)
		{
			throw(string("Error: something went wrong during the first parsing of the VHDL code!"));
		}
		*yyextra->isLhsSet = true;
	}else if(*yyextra->lexingMode == LexerContext::signalAssignment)
	{
		// this is the right hand side of the assignment
		(*yyextra->os) << "$$" << yytext << "$$";
		
		triplet<string, string, int> tempTriplet;

		tempTriplet.first = *yyextra->lhsName;
		tempTriplet.second = yytext;
		tempTriplet.third = 0;

		yyextra->dependenceTable->push_back(tempTriplet);
	}else if(*yyextra->lexingMode == LexerContext::conditionalSignalAssignment)
	{
		// this is the right hand side of the assignment
		(*yyextra->os) << "$$" << yytext << "$$";
		
		triplet<string, string, int> tempTriplet;

		tempTriplet.first = *yyextra->lhsName;
		tempTriplet.second = yytext;
		tempTriplet.third = 0;

		yyextra->dependenceTable->push_back(tempTriplet);
	}else if(*yyextra->lexingMode == LexerContext::selectedSignalAssignment)
	{
		// this signal is on the left side of the assignment, but belongs to the right side
		(*yyextra->os) << "$$" << yytext << "$$";
		
		yyextra->extraRhsNames->push_back(yytext);
		
		//switch the parsing mode to the next stage, selectedSignalAssignment2
		*yyextra->lexingMode = LexerContext::selectedSignalAssignment2;
		
		//save the left-hand side name for later to create the dependence
		yyextra->extraRhsNames->push_back(yytext);
	}else if(*yyextra->lexingMode == LexerContext::selectedSignalAssignment2)
	{
		// this signal is on the left side of the assignment
		(*yyextra->os) << "??" << yytext << "??";
		
		*yyextra->lhsName = yytext;
		
		if(*yyextra->isLhsSet == true)
		{
			throw(string("Error: something went wrong during the first parsing of the VHDL code!"));
			//throw("Error: something went wrong during the first parsing of the VHDL code!");
		}
		*yyextra->isLhsSet = true;
		
		//switch the parsing mode to the next stage, selectedSignalAssignment3
        *yyextra->lexingMode = LexerContext::selectedSignalAssignment3;
	}else if(*yyextra->lexingMode == LexerContext::selectedSignalAssignment3)
	{
		// this signal is on the right side of the assignment
		(*yyextra->os) << "$$" << yytext << "$$";
		
		triplet<string, string, int> tempTriplet;

		tempTriplet.first = *yyextra->lhsName;
		tempTriplet.second = yytext;
		tempTriplet.third = 0;

		yyextra->dependenceTable->push_back(tempTriplet);
	}else if(*yyextra->lexingMode == LexerContext::variableAssignment)
	{
		(*yyextra->os) << yytext;
	}else if(*yyextra->lexingMode == LexerContext::portmap)
	{
		(*yyextra->os) << "??" << yytext << "??";
		*yyextra->lexingMode = LexerContext::portmap2;
	}else if(*yyextra->lexingMode == LexerContext::portmap2)
	{
		(*yyextra->os) << "$$" << yytext << "$$";
		*yyextra->lexingMode = LexerContext::portmap;
	}else if(*yyextra->lexingMode == LexerContext::caseStatement)
	{
		(*yyextra->os) << yytext;
	}else if(*yyextra->lexingMode == LexerContext::process)
	{
		(*yyextra->os) << yytext;
	}else if(*yyextra->lexingMode == LexerContext::comment)
	{
		//this is a comment, so just output the input
		(*yyextra->os) << yytext;
	}else
	{
		(*yyextra->os) << yytext;
	}
}
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 428 "/home/binaryman/Documents/PhD/flopoco/src/VHDLLexerRule.l"
{
	(*yyextra->os) << yytext;
}
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 433 "/home/binaryman/Documents/PhD/flopoco/src/VHDLLexerRule.l"
{
	(*yyextra->os) << yytext;
}
	YY_BREAK
case 109:
/* rule 109 can match eol */
YY_RULE_SETUP
#line 437 "/home/binaryman/Documents/PhD/flopoco/src/VHDLLexerRule.l"
{
	(*yyextra->os) << yytext;
	
	if(*yyextra->lexingMode == LexerContext::comment)
	{
		*yyextra->lexingMode = *yyextra->lexingModeOld;
	}
}
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 446 "/home/binaryman/Documents/PhD/flopoco/src/VHDLLexerRule.l"
{ 
	(*yyextra->os) << yytext;
}
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 450 "/home/binaryman/Documents/PhD/flopoco/src/VHDLLexerRule.l"
{
	(*yyextra->os) << yytext;
	
	//if, while parsing a component instance, there is a constant signal connected to
	//	the port, then just reinitialize the state count
	if(*yyextra->lexingMode == LexerContext::portmap2)
	{
		*yyextra->lexingMode = LexerContext::portmap;
	}
}
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 462 "/home/binaryman/Documents/PhD/flopoco/src/VHDLLexerRule.l"
{
	(*yyextra->os) << yytext; 
}
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 466 "/home/binaryman/Documents/PhD/flopoco/src/VHDLLexerRule.l"
{ 
	(*yyextra->os) << yytext;
}
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 470 "/home/binaryman/Documents/PhD/flopoco/src/VHDLLexerRule.l"
{
	(*yyextra->os) << yytext;
}
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 474 "/home/binaryman/Documents/PhD/flopoco/src/VHDLLexerRule.l"
{ 
	(*yyextra->os) << yytext;
}
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 478 "/home/binaryman/Documents/PhD/flopoco/src/VHDLLexerRule.l"
{
	// this is a comment
	(*yyextra->os) << yytext;
	
	*yyextra->lexingModeOld = *yyextra->lexingMode;
	*yyextra->lexingMode = LexerContext::comment;
}
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 486 "/home/binaryman/Documents/PhD/flopoco/src/VHDLLexerRule.l"
{
	(*yyextra->os) << yytext;
}
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 492 "/home/binaryman/Documents/PhD/flopoco/src/VHDLLexerRule.l"
ECHO;
	YY_BREAK
#line 2405 "/home/binaryman/Documents/PhD/flopoco/build/VHDLLexer.cpp"
case YY_STATE_EOF(INITIAL):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yyg->yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yyg->yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yyg->yy_c_buf_p <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yyg->yy_c_buf_p = yyg->yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state( yyscanner );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state , yyscanner);

			yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yyg->yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yyg->yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer( yyscanner ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yyg->yy_did_buffer_switch_on_eof = 0;

				if ( yywrap( yyscanner ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yyg->yy_c_buf_p = yyg->yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yyg->yy_c_buf_p =
					yyg->yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yyg->yy_c_buf_p =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars];

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = yyg->yytext_ptr;
	int number_to_move, i;
	int ret_val;

	if ( yyg->yy_c_buf_p > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yyg->yy_c_buf_p - yyg->yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr - 1);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) (yyg->yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc( (void *) b->yy_ch_buf,
							 (yy_size_t) (b->yy_buf_size + 2) , yyscanner );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = NULL;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yyg->yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			yyg->yy_n_chars, num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	if ( yyg->yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  , yyscanner);
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yyg->yy_n_chars + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = yyg->yy_n_chars + number_to_move + (yyg->yy_n_chars >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc(
			(void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, (yy_size_t) new_size , yyscanner );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
		/* "- 2" to take care of EOB's */
		YY_CURRENT_BUFFER_LVALUE->yy_buf_size = (int) (new_size - 2);
	}

	yyg->yy_n_chars += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yyg->yytext_ptr = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (yyscan_t yyscanner)
{
	yy_state_type yy_current_state;
	char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_current_state = yyg->yy_start;

	for ( yy_cp = yyg->yytext_ptr + YY_MORE_ADJ; yy_cp < yyg->yy_c_buf_p; ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yyg->yy_last_accepting_state = yy_current_state;
			yyg->yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 501 )
				yy_c = yy_meta[yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state , yyscan_t yyscanner)
{
	int yy_is_jam;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner; /* This var may be unused depending upon options. */
	char *yy_cp = yyg->yy_c_buf_p;

	YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yyg->yy_last_accepting_state = yy_current_state;
		yyg->yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 501 )
			yy_c = yy_meta[yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	yy_is_jam = (yy_current_state == 500);

	(void)yyg;
	return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT

#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (yyscan_t yyscanner)
#else
    static int input  (yyscan_t yyscanner)
#endif

{
	int c;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	*yyg->yy_c_buf_p = yyg->yy_hold_char;

	if ( *yyg->yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yyg->yy_c_buf_p < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			/* This was really a NUL. */
			*yyg->yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr);
			++yyg->yy_c_buf_p;

			switch ( yy_get_next_buffer( yyscanner ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin , yyscanner);

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap( yyscanner ) )
						return 0;

					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput(yyscanner);
#else
					return input(yyscanner);
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yyg->yy_c_buf_p = yyg->yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yyg->yy_c_buf_p;	/* cast for 8-bit char's */
	*yyg->yy_c_buf_p = '\0';	/* preserve yytext */
	yyg->yy_hold_char = *++yyg->yy_c_buf_p;

	if ( c == '\n' )
		
    do{ yylineno++;
        yycolumn=0;
    }while(0)
;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * @param yyscanner The scanner object.
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack (yyscanner);
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner);
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file , yyscanner);
	yy_load_buffer_state( yyscanner );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * @param yyscanner The scanner object.
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack (yyscanner);
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state( yyscanner );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yyg->yy_did_buffer_switch_on_eof = 1;
}

static void yy_load_buffer_state  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	yyg->yytext_ptr = yyg->yy_c_buf_p = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	yyg->yy_hold_char = *yyg->yy_c_buf_p;
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * @param yyscanner The scanner object.
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state ) , yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc( (yy_size_t) (b->yy_buf_size + 2) , yyscanner );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file , yyscanner);

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * @param yyscanner The scanner object.
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree( (void *) b->yy_ch_buf , yyscanner );

	yyfree( (void *) b , yyscanner );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file , yyscan_t yyscanner)

{
	int oerrno = errno;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_flush_buffer( b , yyscanner);

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * @param yyscanner The scanner object.
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state( yyscanner );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  @param yyscanner The scanner object.
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack(yyscanner);

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		yyg->yy_buffer_stack_top++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state( yyscanner );
	yyg->yy_did_buffer_switch_on_eof = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  @param yyscanner The scanner object.
 */
void yypop_buffer_state (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER , yyscanner);
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if (yyg->yy_buffer_stack_top > 0)
		--yyg->yy_buffer_stack_top;

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state( yyscanner );
		yyg->yy_did_buffer_switch_on_eof = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (yyscan_t yyscanner)
{
	yy_size_t num_to_alloc;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if (!yyg->yy_buffer_stack) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		yyg->yy_buffer_stack = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		memset(yyg->yy_buffer_stack, 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		yyg->yy_buffer_stack_max = num_to_alloc;
		yyg->yy_buffer_stack_top = 0;
		return;
	}

	if (yyg->yy_buffer_stack_top >= (yyg->yy_buffer_stack_max) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = yyg->yy_buffer_stack_max + grow_size;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)yyrealloc
								(yyg->yy_buffer_stack,
								num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset(yyg->yy_buffer_stack + yyg->yy_buffer_stack_max, 0, grow_size * sizeof(struct yy_buffer_state*));
		yyg->yy_buffer_stack_max = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return NULL;

	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state ) , yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = (int) (size - 2);	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = NULL;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b , yyscanner );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (const char * yystr , yyscan_t yyscanner)
{
    
	return yy_scan_bytes( yystr, (int) strlen(yystr) , yyscanner);
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (const char * yybytes, int  _yybytes_len , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = (yy_size_t) (_yybytes_len + 2);
	buf = (char *) yyalloc( n , yyscanner );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n , yyscanner);
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yynoreturn yy_fatal_error (const char* msg , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = yyg->yy_hold_char; \
		yyg->yy_c_buf_p = yytext + yyless_macro_arg; \
		yyg->yy_hold_char = *yyg->yy_c_buf_p; \
		*yyg->yy_c_buf_p = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the user-defined data for this scanner.
 * @param yyscanner The scanner object.
 */
YY_EXTRA_TYPE yyget_extra  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyextra;
}

/** Get the current line number.
 * @param yyscanner The scanner object.
 */
int yyget_lineno  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yylineno;
}

/** Get the current column number.
 * @param yyscanner The scanner object.
 */
int yyget_column  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yycolumn;
}

/** Get the input stream.
 * @param yyscanner The scanner object.
 */
FILE *yyget_in  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyin;
}

/** Get the output stream.
 * @param yyscanner The scanner object.
 */
FILE *yyget_out  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyout;
}

/** Get the length of the current token.
 * @param yyscanner The scanner object.
 */
int yyget_leng  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyleng;
}

/** Get the current token.
 * @param yyscanner The scanner object.
 */

char *yyget_text  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yytext;
}

/** Set the user-defined data. This data is never touched by the scanner.
 * @param user_defined The data to be associated with this scanner.
 * @param yyscanner The scanner object.
 */
void yyset_extra (YY_EXTRA_TYPE  user_defined , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyextra = user_defined ;
}

/** Set the current line number.
 * @param _line_number line number
 * @param yyscanner The scanner object.
 */
void yyset_lineno (int  _line_number , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* lineno is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "yyset_lineno called with no buffer" );
    
    yylineno = _line_number;
}

/** Set the current column.
 * @param _column_no column number
 * @param yyscanner The scanner object.
 */
void yyset_column (int  _column_no , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* column is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "yyset_column called with no buffer" );
    
    yycolumn = _column_no;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * @param yyscanner The scanner object.
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  _in_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyin = _in_str ;
}

void yyset_out (FILE *  _out_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyout = _out_str ;
}

int yyget_debug  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yy_flex_debug;
}

void yyset_debug (int  _bdebug , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yy_flex_debug = _bdebug ;
}

/* Accessor methods for yylval and yylloc */

/* User-visible API */

/* yylex_init is special because it creates the scanner itself, so it is
 * the ONLY reentrant function that doesn't take the scanner as the last argument.
 * That's why we explicitly handle the declaration, instead of using our macros.
 */
int yylex_init(yyscan_t* ptr_yy_globals)
{
    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) yyalloc ( sizeof( struct yyguts_t ), NULL );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    return yy_init_globals ( *ptr_yy_globals );
}

/* yylex_init_extra has the same functionality as yylex_init, but follows the
 * convention of taking the scanner as the last argument. Note however, that
 * this is a *pointer* to a scanner, as it will be allocated by this call (and
 * is the reason, too, why this function also must handle its own declaration).
 * The user defined value in the first argument will be available to yyalloc in
 * the yyextra field.
 */
int yylex_init_extra( YY_EXTRA_TYPE yy_user_defined, yyscan_t* ptr_yy_globals )
{
    struct yyguts_t dummy_yyguts;

    yyset_extra (yy_user_defined, &dummy_yyguts);

    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) yyalloc ( sizeof( struct yyguts_t ), &dummy_yyguts );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in
    yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    yyset_extra (yy_user_defined, *ptr_yy_globals);

    return yy_init_globals ( *ptr_yy_globals );
}

static int yy_init_globals (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    yyg->yy_buffer_stack = NULL;
    yyg->yy_buffer_stack_top = 0;
    yyg->yy_buffer_stack_max = 0;
    yyg->yy_c_buf_p = NULL;
    yyg->yy_init = 0;
    yyg->yy_start = 0;

    yyg->yy_start_stack_ptr = 0;
    yyg->yy_start_stack_depth = 0;
    yyg->yy_start_stack =  NULL;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = NULL;
    yyout = NULL;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer( YY_CURRENT_BUFFER , yyscanner );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state(yyscanner);
	}

	/* Destroy the stack itself. */
	yyfree(yyg->yy_buffer_stack , yyscanner);
	yyg->yy_buffer_stack = NULL;

    /* Destroy the start condition stack. */
        yyfree( yyg->yy_start_stack , yyscanner );
        yyg->yy_start_stack = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( yyscanner);

    /* Destroy the main struct (reentrant only). */
    yyfree ( yyscanner , yyscanner );
    yyscanner = NULL;
    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, const char * s2, int n , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;

	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (const char * s , yyscan_t yyscanner)
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	return malloc(size);
}

void *yyrealloc  (void * ptr, yy_size_t  size , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;

	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}

void yyfree (void * ptr , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 492 "/home/binaryman/Documents/PhD/flopoco/src/VHDLLexerRule.l"


void LexerContext::init_scanner() {
	yylex_init(&scanner);
	yyset_extra(this, scanner);
}

void LexerContext::destroy_scanner() {
	yylex_destroy(scanner);
}

void LexerContext::lex() {
	yylex(scanner);
}

