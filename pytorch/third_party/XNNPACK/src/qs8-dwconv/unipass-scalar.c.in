// Copyright 2021 Google LLC
//
// This source code is licensed under the BSD-style license found in the
// LICENSE file in the root directory of this source tree.

$assert KERNEL_TILE >= 2
#include <assert.h>

#include <xnnpack/dwconv.h>
#include <xnnpack/math.h>


void xnn_qs8_dwconv_minmax_gemmlowp_ukernel_up${CHANNEL_TILE}x${KERNEL_TILE}__scalar(
    size_t channels,
    size_t output_width,
    const int8_t** input,
    const void* weights,
    int8_t* output,
    size_t input_stride,
    size_t output_increment,
    size_t input_offset,
    const int8_t* zero,
    const union xnn_qs8_conv_minmax_params params[restrict XNN_MIN_ELEMENTS(1)]) XNN_DISABLE_TSAN
{
  assert(channels != 0);
  assert(output_width != 0);

  const int32_t vmultiplier = params->gemmlowp_scalar.multiplier;
  const int64_t vq31rounding = INT64_C(0x40000000);
  const int32_t vremainder_mask = params->gemmlowp_scalar.remainder_mask;
  const uint32_t vshift = params->gemmlowp_scalar.shift;
  const int32_t vremainder_threshold = params->gemmlowp_scalar.remainder_threshold;
  const int32_t vout_min = params->gemmlowp_scalar.output_min_less_zero_point;
  const int32_t vout_max = params->gemmlowp_scalar.output_max_less_zero_point;
  const int32_t voutput_zero_point = params->gemmlowp_scalar.output_zero_point;
  do {
    $for K in range(KERNEL_TILE):
      const int8_t* i${K} = input[${K}];
      assert(i${K} != NULL);
      if XNN_UNPREDICTABLE(i${K} != zero) {
        i${K} = (const int8_t*) ((uintptr_t) i${K} + input_offset);
      }
    input = (const int8_t**) ((uintptr_t) input + input_stride);

    size_t c = channels;
    const void* w = weights;
    $if CHANNEL_TILE == 1:
      do {
        int32_t vacc = *((const int32_t*) w);

        $for K in range(KERNEL_TILE):
          const int32_t vi${K} = *i${K}++;
          const int32_t vk${K} = ((const int8_t*) ((uintptr_t) w + sizeof(int32_t)))[${K}];
          vacc += vi${K} * vk${K};

        w = (const void*) ((uintptr_t) w + sizeof(int32_t) + ${KERNEL_TILE} * sizeof(int8_t));

        const int64_t vproduct = (int64_t) vacc * (int64_t) vmultiplier;
        const int32_t vq31product = (int32_t) (uint32_t) ((uint64_t) (vproduct + vq31rounding) >> 31);
        const int32_t vremainder = (vq31product & vremainder_mask) - (int32_t) (vq31product < 0);

        int32_t vout = asr_s32(vq31product, vshift) + (int32_t) (vremainder > vremainder_threshold);
        vout = math_max_s32(vout, vout_min);
        vout = math_min_s32(vout, vout_max);
        vout += voutput_zero_point;
        *output++ = (int8_t) vout;
      } while (--c != 0);
    $else:
      for (; c >= ${CHANNEL_TILE}; c -= ${CHANNEL_TILE}) {
        $for C in range(CHANNEL_TILE):
          int32_t vacc${C} = ((const int32_t*) w)[${C}];

        $for K in range(KERNEL_TILE):

          $for C in range(CHANNEL_TILE):
            const int32_t vi${K}x${C} = i${K}[${C}];
          i${K} += ${CHANNEL_TILE};

          $for C in range(CHANNEL_TILE):
            const int32_t vk${K}x${C} = ((const int8_t*) ((uintptr_t) w + ${CHANNEL_TILE} * sizeof(int32_t)))[${K * CHANNEL_TILE + C}];

          $for C in range(CHANNEL_TILE):
            vacc${C} += vi${K}x${C} * vk${K}x${C};

        w = (const void*) ((uintptr_t) w + ${CHANNEL_TILE} * sizeof(int32_t) + ${KERNEL_TILE * CHANNEL_TILE} * sizeof(int8_t));

        $for C in range(CHANNEL_TILE):
          const int64_t vproduct${C} = (int64_t) vacc${C} * (int64_t) vmultiplier;

        $for C in range(CHANNEL_TILE):
          const int32_t vq31product${C} = (int32_t) (uint32_t) ((uint64_t) (vproduct${C} + vq31rounding) >> 31);

        $for C in range(CHANNEL_TILE):
          const int32_t vremainder${C} = (vq31product${C} & vremainder_mask) - (int32_t) (vq31product${C} < 0);

        $for C in range(CHANNEL_TILE):
          int32_t vout${C} = asr_s32(vq31product${C}, vshift) + (int32_t) (vremainder${C} > vremainder_threshold);

        $for C in range(CHANNEL_TILE):
          vout${C} = math_max_s32(vout${C}, vout_min);

        $for C in range(CHANNEL_TILE):
          vout${C} = math_min_s32(vout${C}, vout_max);

        $for C in range(CHANNEL_TILE):
          vout${C} += voutput_zero_point;

        $for C in range(CHANNEL_TILE):
          output[${C}] = (int8_t) vout${C};
        output += ${CHANNEL_TILE};
      }
      if XNN_UNLIKELY(c != 0) {
        $if CHANNEL_TILE == 2:
          int32_t vacc = *((const int32_t*) w);

          $for K in range(KERNEL_TILE):
            const int32_t vi${K} = *i${K};
            const int32_t vk${K} = ((const int8_t*) ((uintptr_t) w + ${CHANNEL_TILE} * sizeof(int32_t)))[${K * CHANNEL_TILE}];
            vacc += vi${K} * vk${K};

          const int64_t vproduct = (int64_t) vacc * (int64_t) vmultiplier;
          const int32_t vq31product = (int32_t) (uint32_t) ((uint64_t) (vproduct + vq31rounding) >> 31);
          const int32_t vremainder = (vq31product & vremainder_mask) - (int32_t) (vq31product < 0);

          int32_t vout = asr_s32(vq31product, vshift) + (int32_t) (vremainder > vremainder_threshold);
          vout = math_max_s32(vout, vout_min);
          vout = math_min_s32(vout, vout_max);
          vout += voutput_zero_point;
          *output++ = (int8_t) vout;
        $else:
          const int8_t* k = (const int8_t*) ((uintptr_t) w + ${CHANNEL_TILE} * sizeof(int32_t));
          do {
            int32_t vacc = *((const int32_t*) w);
            w = (const void*) ((uintptr_t) w + sizeof(int32_t));

            $for K in range(KERNEL_TILE):
              const int32_t vi${K} = *i${K}++;
              const int32_t vk${K} = k[${K * CHANNEL_TILE}];
              vacc += vi${K} * vk${K};
            k += 1;

            const int64_t vproduct = (int64_t) vacc * (int64_t) vmultiplier;
            const int32_t vq31product = (int32_t) (uint32_t) ((uint64_t) (vproduct + vq31rounding) >> 31);
            const int32_t vremainder = (vq31product & vremainder_mask) - (int32_t) (vq31product < 0);

            int32_t vout = asr_s32(vq31product, vshift) + (int32_t) (vremainder > vremainder_threshold);
            vout = math_max_s32(vout, vout_min);
            vout = math_min_s32(vout, vout_max);
            vout += voutput_zero_point;
            *output++ = (int8_t) vout;
          } while (--c != 0);
      }

    output = (int8_t*) ((uintptr_t) output + output_increment);
  } while (--output_width != 0);
}
