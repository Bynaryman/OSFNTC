// Copyright 2020 Google LLC
//
// This source code is licensed under the BSD-style license found in the
// LICENSE file in the root directory of this source tree.

$assert SSE == 4
$assert not XOP or AVX
$assert not AVX or SSE == 4
$assert REQUANTIZATION in ["GEMMLOWP", "FP32"]
$assert not CHANNELWISE or REQUANTIZATION == "FP32"
$assert SSE != 3 or REQUANTIZATION != "FP32"
$ABC = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ"
$assert CHANNEL_TILE % 8 == 0
$assert CHANNEL_TILE >= 8
$assert KERNEL_TILE >= 2
#include <assert.h>

$if XOP:
  #if defined(__GNUC__) || defined(__clang__)
    #include <x86intrin.h>
  #else
    #include <immintrin.h>
    #include <ammintrin.h>
  #endif
$else:
  #include <immintrin.h>

#include <xnnpack/dwconv.h>
#include <xnnpack/intrinsics-polyfill.h>


$DATATYPE = "qc8" if CHANNELWISE else "qs8"
$CONV_PARAMS = "xnn_qs8_minmax_params" if CHANNELWISE else "xnn_qs8_conv_minmax_params"
$PARAMS_STRUCT = "sse4" if CHANNELWISE else REQUANTIZATION.lower() + "_sse4"
$ISA = "xop" if XOP else "avx" if AVX else {4: "sse41"}[SSE]
void xnn_${DATATYPE}_dwconv_minmax_${REQUANTIZATION.lower()}_ukernel_up${CHANNEL_TILE}x${KERNEL_TILE}__${ISA}_mul32(
    size_t channels,
    size_t output_width,
    const int8_t** input,
    const void* weights,
    int8_t* output,
    size_t input_stride,
    size_t output_increment,
    size_t input_offset,
    const int8_t* zero,
    const union ${CONV_PARAMS} params[restrict XNN_MIN_ELEMENTS(1)]) XNN_DISABLE_TSAN
{
  assert(channels != 0);
  assert(output_width != 0);

  do {
    $for K in range(KERNEL_TILE):
      const int8_t* i${K} = input[${K}];
      assert(i${K} != NULL);
      if XNN_UNPREDICTABLE(i${K} != zero) {
        i${K} = (const int8_t*) ((uintptr_t) i${K} + input_offset);
      }
    input = (const int8_t**) ((uintptr_t) input + input_stride);

    size_t c = channels;
    const void* w = weights;
    for (; c >= ${CHANNEL_TILE}; c -= ${CHANNEL_TILE}) {
      __m128i vacc${ABC[0:4]} = _mm_loadu_si128((const __m128i*) w);
      $for C in range(4, CHANNEL_TILE, 4):
        __m128i vacc${ABC[C:C+4]} = _mm_loadu_si128((const __m128i*) ((uintptr_t) w + ${C} * sizeof(int32_t)));

      $for K in range(KERNEL_TILE):

        $for C in range(0, CHANNEL_TILE, 4):
          $if C == 0:
            const __m128i vi${K}x${ABC[0:4]} = _mm_cvtepi8_epi32(_mm_loadu_si32(i${K}));
          $else:
            const __m128i vi${K}x${ABC[C:C+4]} = _mm_cvtepi8_epi32(_mm_loadu_si32((const void*) (i${K} + ${C})));
          const __m128i vk${K}x${ABC[C:C+4]} = _mm_cvtepi8_epi32(_mm_loadu_si32((const void*) ((uintptr_t) w + ${CHANNEL_TILE} * sizeof(int32_t) + ${K * CHANNEL_TILE + C} * sizeof(int8_t))));
        i${K} += ${CHANNEL_TILE};

        $for C in range(0, CHANNEL_TILE, 4):
          $if XOP:
            vacc${ABC[C:C+4]} = _mm_macc_epi32(vi${K}x${ABC[C:C+4]}, vk${K}x${ABC[C:C+4]}, vacc${ABC[C:C+4]});
          $else:
            vacc${ABC[C:C+4]} = _mm_add_epi32(vacc${ABC[C:C+4]}, _mm_mullo_epi32(vi${K}x${ABC[C:C+4]}, vk${K}x${ABC[C:C+4]}));

      w = (const void*) ((uintptr_t) w + ${CHANNEL_TILE} * sizeof(int32_t) + ${KERNEL_TILE * CHANNEL_TILE} * sizeof(int8_t));

      $if REQUANTIZATION == "GEMMLOWP":
        const __m128i vmultiplier = _mm_load_si128((const __m128i*) params->${PARAMS_STRUCT}.multiplier);
        const __m128i vrounding = _mm_load_si128((const __m128i*) params->${PARAMS_STRUCT}.rounding);

        $for C in range(0, CHANNEL_TILE, 4):
          const __m128i vacc${ABC[C+1:C+4:2]} = _mm_shuffle_epi32(vacc${ABC[C:C+4]}, _MM_SHUFFLE(3, 3, 1, 1));
          const __m128i vprod${ABC[C:C+4:2]} = _mm_add_epi64(_mm_mul_epi32(vacc${ABC[C:C+4]}, vmultiplier), vrounding);
          const __m128i vprod${ABC[C+1:C+4:2]} = _mm_add_epi64(_mm_mul_epi32(vacc${ABC[C+1:C+4:2]}, vmultiplier), vrounding);

        $for C in range(0, CHANNEL_TILE, 4):
          const __m128i vq31prod${ABC[C:C+4:2]} = _mm_srli_epi64(vprod${ABC[C:C+4:2]}, 31);
          const __m128i vq31prod${ABC[C+1:C+4:2]} = _mm_add_epi64(vprod${ABC[C+1:C+4:2]}, vprod${ABC[C+1:C+4:2]});

        $for C in range(0, CHANNEL_TILE, 4):
          const __m128i vq31prod${ABC[C:C+4]} = _mm_blend_epi16(vq31prod${ABC[C:C+4:2]}, vq31prod${ABC[C+1:C+4:2]}, 0xCC);

        const __m128i vremainder_mask = _mm_load_si128((const __m128i*) params->${PARAMS_STRUCT}.remainder_mask);
        $for C in range(0, CHANNEL_TILE, 4):
          const __m128i vrem${ABC[C:C+4]} =
            _mm_add_epi32(_mm_and_si128(vq31prod${ABC[C:C+4]}, vremainder_mask), _mm_cmpgt_epi32(_mm_setzero_si128(), vq31prod${ABC[C:C+4]}));

        const __m128i vremainder_threshold = _mm_load_si128((const __m128i*) params->${PARAMS_STRUCT}.remainder_threshold);
        const __m128i vshift = _mm_loadl_epi64((const __m128i*) params->${PARAMS_STRUCT}.shift);
        $for C in range(0, CHANNEL_TILE, 4):
          vacc${ABC[C:C+4]} =
            _mm_sub_epi32(_mm_sra_epi32(vq31prod${ABC[C:C+4]}, vshift), _mm_cmpgt_epi32(vrem${ABC[C:C+4]}, vremainder_threshold));
      $elif REQUANTIZATION == "FP32":
        $for C in range(0, CHANNEL_TILE, 4):
          __m128 vscaled${ABC[C:C+4]} = _mm_cvtepi32_ps(vacc${ABC[C:C+4]});

        $if CHANNELWISE:
          const __m128 vscale${ABC[0:4]} = _mm_loadu_ps((const float*) w);
          $for C in range(4, CHANNEL_TILE, 4):
            const __m128 vscale${ABC[C:C+4]} = _mm_loadu_ps((const float*) ((uintptr_t) w + ${C} * sizeof(float)));
          w = (const void*) ((uintptr_t) w + ${CHANNEL_TILE} * sizeof(float));
          $for C in range(0, CHANNEL_TILE, 4):
            vscaled${ABC[C:C+4]} = _mm_mul_ps(vscaled${ABC[C:C+4]}, vscale${ABC[C:C+4]});
        $else:
          const __m128 vscale = _mm_load_ps(params->${PARAMS_STRUCT}.scale);
          $for C in range(0, CHANNEL_TILE, 4):
            vscaled${ABC[C:C+4]} = _mm_mul_ps(vscaled${ABC[C:C+4]}, vscale);

        $for C in range(0, CHANNEL_TILE, 4):
          vacc${ABC[C:C+4]} = _mm_cvtps_epi32(vscaled${ABC[C:C+4]});

      const __m128i voutput_zero_point = _mm_load_si128((const __m128i*) params->${PARAMS_STRUCT}.output_zero_point);
      $for C in range(0, CHANNEL_TILE, 8):
        __m128i vout${ABC[C:C+8]} = _mm_adds_epi16(_mm_packs_epi32(vacc${ABC[C:C+4]}, vacc${ABC[C+4:C+8]}), voutput_zero_point);

      const __m128i voutput_min = _mm_load_si128((const __m128i*) params->${PARAMS_STRUCT}.output_min);
      const __m128i voutput_max = _mm_load_si128((const __m128i*) params->${PARAMS_STRUCT}.output_max);
      $for C in range(0, CHANNEL_TILE, 16):
        $if C + 8 < CHANNEL_TILE:
          __m128i vout${ABC[C:C+16]} = _mm_packs_epi16(vout${ABC[C:C+8]}, vout${ABC[C+8:C+16]});
          vout${ABC[C:C+16]} = _mm_max_epi8(vout${ABC[C:C+16]}, voutput_min);
          vout${ABC[C:C+16]} = _mm_min_epi8(vout${ABC[C:C+16]}, voutput_max);
        $else:
          __m128i vout${ABC[C:C+8]}${ABC[C:C+8]} = _mm_packs_epi16(vout${ABC[C:C+8]}, vout${ABC[C:C+8]});
          vout${ABC[C:C+8]}${ABC[C:C+8]} = _mm_max_epi8(vout${ABC[C:C+8]}${ABC[C:C+8]}, voutput_min);
          vout${ABC[C:C+8]}${ABC[C:C+8]} = _mm_min_epi8(vout${ABC[C:C+8]}${ABC[C:C+8]}, voutput_max);

      $if CHANNEL_TILE > 8:
        _mm_storeu_si128((__m128i*) output, vout${ABC[0:16]});
      $else:
        _mm_storel_epi64((__m128i*) output, vout${ABC[0:8]}${ABC[0:8]});
      $for C in range(16, CHANNEL_TILE, 16):
        $if C + 8 < CHANNEL_TILE:
          _mm_storeu_si128((__m128i*) (output + ${C}), vout${ABC[C:C+16]});
        $else:
          _mm_storel_epi64((__m128i*) (output + ${C}), vout${ABC[C:C+8]}${ABC[C:C+8]});
      output += ${CHANNEL_TILE};
    }
    if XNN_UNLIKELY(c != 0) {
      $if CHANNEL_TILE > 4:
        const int8_t* k = (const int8_t*) ((uintptr_t) w + ${CHANNEL_TILE} * sizeof(int32_t));
      ${"do " if CHANNEL_TILE > 4 else ""}{
        __m128i vacc${ABC[0:4]} = _mm_loadu_si128((const __m128i*) w);

        $for K in range(KERNEL_TILE):

          const __m128i vi${K}x${ABC[0:4]} = _mm_cvtepi8_epi32(_mm_loadu_si32(i${K}));
          $if CHANNEL_TILE > 4:
            $if K == 0:
              const __m128i vk${K}x${ABC[0:4]} = _mm_cvtepi8_epi32(_mm_loadu_si32(k));
            $else:
              const __m128i vk${K}x${ABC[0:4]} = _mm_cvtepi8_epi32(_mm_loadu_si32((const void*) (k + ${K * CHANNEL_TILE})));
          $else:
            const __m128i vk${K}x${ABC[0:4]} = _mm_cvtepi8_epi32(_mm_loadu_si32((const void*) ((uintptr_t) w + ${CHANNEL_TILE} * sizeof(int32_t) + ${K * CHANNEL_TILE} * sizeof(int8_t))));
          $if CHANNEL_TILE > 4:
            i${K} += 4;

          $if XOP:
            vacc${ABC[0:4]} = _mm_macc_epi32(vi${K}x${ABC[0:4]}, vk${K}x${ABC[0:4]}, vacc${ABC[0:4]});
          $else:
            vacc${ABC[0:4]} = _mm_add_epi32(vacc${ABC[0:4]}, _mm_mullo_epi32(vi${K}x${ABC[0:4]}, vk${K}x${ABC[0:4]}));

        $if CHANNEL_TILE > 4:
          k += 4;

        $if REQUANTIZATION == "GEMMLOWP":
          const __m128i vmultiplier = _mm_load_si128((const __m128i*) params->${PARAMS_STRUCT}.multiplier);
          const __m128i vrounding = _mm_load_si128((const __m128i*) params->${PARAMS_STRUCT}.rounding);

          const __m128i vacc${ABC[1:4:2]} = _mm_shuffle_epi32(vacc${ABC[0:4]}, _MM_SHUFFLE(3, 3, 1, 1));

          const __m128i vprod${ABC[0:4:2]} = _mm_add_epi64(_mm_mul_epi32(vacc${ABC[0:4]}, vmultiplier), vrounding);
          const __m128i vprod${ABC[1:4:2]} = _mm_add_epi64(_mm_mul_epi32(vacc${ABC[1:4:2]}, vmultiplier), vrounding);

          const __m128i vq31prod${ABC[0:4:2]} = _mm_srli_epi64(vprod${ABC[0:4:2]}, 31);
          const __m128i vq31prod${ABC[1:4:2]} = _mm_add_epi64(vprod${ABC[1:4:2]}, vprod${ABC[1:4:2]});

          const __m128i vq31prod${ABC[0:4]} = _mm_blend_epi16(vq31prod${ABC[0:4:2]}, vq31prod${ABC[1:4:2]}, 0xCC);

          const __m128i vremainder_mask = _mm_load_si128((const __m128i*) params->${PARAMS_STRUCT}.remainder_mask);
          const __m128i vrem${ABC[0:4]} =
            _mm_add_epi32(_mm_and_si128(vq31prod${ABC[0:4]}, vremainder_mask), _mm_cmpgt_epi32(_mm_setzero_si128(), vq31prod${ABC[0:4]}));

          const __m128i vremainder_threshold = _mm_load_si128((const __m128i*) params->${PARAMS_STRUCT}.remainder_threshold);
          const __m128i vshift = _mm_loadl_epi64((const __m128i*) params->${PARAMS_STRUCT}.shift);
          vacc${ABC[0:4]} =
            _mm_sub_epi32(_mm_sra_epi32(vq31prod${ABC[0:4]}, vshift), _mm_cmpgt_epi32(vrem${ABC[0:4]}, vremainder_threshold));
        $elif REQUANTIZATION == "FP32":
          __m128 vscaled${ABC[0:4]} = _mm_cvtepi32_ps(vacc${ABC[0:4]});
          $if CHANNELWISE:
            const __m128 vscale${ABC[0:4]} = _mm_loadu_ps((const float*) ((uintptr_t) w + ${CHANNEL_TILE} * sizeof(int32_t) + ${CHANNEL_TILE * KERNEL_TILE} * sizeof(int8_t)));
            vscaled${ABC[0:4]} = _mm_mul_ps(vscaled${ABC[0:4]}, vscale${ABC[0:4]});
          $else:
            vscaled${ABC[0:4]} = _mm_mul_ps(vscaled${ABC[0:4]}, _mm_load_ps(params->${PARAMS_STRUCT}.scale));
          vacc${ABC[0:4]} = _mm_cvtps_epi32(vscaled${ABC[0:4]});

        $if CHANNEL_TILE > 4:
          w = (const void*) ((uintptr_t) w + 4 * sizeof(int32_t));

        const __m128i voutput_zero_point = _mm_load_si128((const __m128i*) params->${PARAMS_STRUCT}.output_zero_point);
        __m128i vout${ABC[0:4]} = _mm_adds_epi16(_mm_packs_epi32(vacc${ABC[0:4]}, vacc${ABC[0:4]}), voutput_zero_point);

        vout${ABC[0:4]} = _mm_packs_epi16(vout${ABC[0:4]}, vout${ABC[0:4]});
        vout${ABC[0:4]} = _mm_max_epi8(vout${ABC[0:4]}, _mm_load_si128((const __m128i*) params->${PARAMS_STRUCT}.output_min));
        vout${ABC[0:4]} = _mm_min_epi8(vout${ABC[0:4]}, _mm_load_si128((const __m128i*) params->${PARAMS_STRUCT}.output_max));

        $if CHANNEL_TILE > 4:
          if XNN_LIKELY(c >= 4) {
            _mm_storeu_si32(output, vout${ABC[0:4]});
            output += 4;
            c -= 4;
          } else {
            if (c & 2) {
              *((uint16_t*) output) = (uint16_t) _mm_extract_epi16(vout${ABC[0:4]}, 0);
              vout${ABC[0:4]} = _mm_srli_epi32(vout${ABC[0:4]}, 16);
              output += 2;
            }
            if (c & 1) {
              *output = (int8_t) _mm_extract_epi8(vout${ABC[0:4]}, 0);
              output += 1;
            }
            c = 0;
          }
        $else:
          if (c & 2) {
            *((uint16_t*) output) = (uint16_t) _mm_extract_epi16(vout${ABC[0:4]}, 0);
            vout${ABC[0:4]} = _mm_srli_epi32(vout${ABC[0:4]}, 16);
            output += 2;
          }
          if (c & 1) {
            *output = (int8_t) _mm_extract_epi8(vout${ABC[0:4]}, 0);
            output += 1;
          }
      }${" while (c != 0);" if CHANNEL_TILE > 4 else ""}
    }

    output = (int8_t*) ((uintptr_t) output + output_increment);
  } while (--output_width != 0);
}
