# Set environment variables for specific configurations

parameters:
  is_official_build: False
  os: ''
  cuda: ''

steps:
  # Environment configuration steps for Ubuntu builds
  - ${{ if contains(parameters.os, 'ubuntu') }}:
    # Set configuration specific build flags
    - ${{ if eq(parameters.is_official_build, True) }}:
      - bash: |
          echo "##vso[task.setvariable variable=INSTALL_TEST;]0"
          echo "##vso[task.setvariable variable=PYTORCH_BUILD_NUMBER;]1"
          export PYTORCH_VERSION=$(head -c 5 ./version.txt)
          echo "##vso[task.setvariable variable=PYTORCH_BUILD_VERSION;]$PYTORCH_VERSION.dev"
        displayName: Set configuration-specific build flags

      # Set PyTorch CPU/GPU build flags.
      - ${{ if contains(parameters.cuda, 'cpu') }}:
        - bash: |
            echo "##vso[task.setvariable variable=USE_CUDA;]0"
            echo "##vso[task.setvariable variable=PYTORCH_BUILD_VERSION;]$(PYTORCH_BUILD_VERSION).cpu"
          displayName: Set CUDA-specific build flag for CPU builds

      - ${{ if contains(parameters.cuda, 'gpu') }}:
        - bash: |
            echo "##vso[task.setvariable variable=USE_CUDA;]1"
            echo "##vso[task.setvariable variable=PYTORCH_BUILD_VERSION;]$(PYTORCH_BUILD_VERSION).cu$(CUDA_VERSION)"
          displayName: Set CUDA-specific build flag for GPU builds

    # Set MKL environment variables
    - bash: |
        echo "##vso[task.setvariable variable=CMAKE_LIBRARY_PATH;]/opt/intel/lib:$CMAKE_LIBRARY_PATH"
        echo "##vso[task.setvariable variable=CMAKE_INCLUDE_PATH;]/opt/intel/include:$CMAKE_INCLUDE_PATH"
      displayName: Set MKL paths

    # View current environment variables
    - bash:
        printenv
      displayName: Show environment variables

  # Environment configuration steps for Windows builds
  - ${{ if contains(parameters.os, 'windows') }}:
    # Set Conda Lib Path
    - powershell: Write-Host "##vso[task.setvariable variable=CONDA_LIB_PATH;]C:\Miniconda\envs\$(configuration)\Library\bin"
      displayName: Set Conda Lib Path

    # Set configuration specific build flags
    - ${{ if eq(parameters.is_official_build, True) }}:
      - powershell: |
          Write-Host "##vso[task.setvariable variable=INSTALL_TEST;]0"
          Write-Host "##vso[task.setvariable variable=PYTORCH_BUILD_NUMBER;]1"
          Set-Variable -Name PYTORCH_VERSION -Value (Get-Content .\version.txt).Substring(0,5)
          Write-Host "##vso[task.setvariable variable=PYTORCH_BUILD_VERSION;]$PYTORCH_VERSION.dev"
        displayName: Set configuration-specific build flags

      # Set PyTorch CPU/GPU build flags..
      - ${{ if contains(parameters.cuda, 'cpu') }}:
        - powershell: |
            Write-Host "##vso[task.setvariable variable=USE_CUDA;]0"
            Write-Host "##vso[task.setvariable variable=PYTORCH_BUILD_VERSION;]$(PYTORCH_BUILD_VERSION).cpu"
          displayName: Set CUDA-specific build flag for CPU build

      - ${{ if contains(parameters.cuda, 'gpu') }}:
        - powershell: |
            Write-Host "##vso[task.setvariable variable=USE_CUDA;]1"
            Write-Host "##vso[task.setvariable variable=PYTORCH_BUILD_VERSION;]$(PYTORCH_BUILD_VERSION).cu$(CUDA_VERSION)"
          displayName: Set CUDA-specific build flag for GPU build

    # Set CUDA 11.2, 10.2 or 10.1 specific build flags
    - ${{ if eq(parameters.cuda, 'gpu') }}:
      - powershell: |
          Write-Host "##vso[task.setvariable variable=TORCH_CUDA_ARCH_LIST;]3.7+PTX;5.0;6.0;6.1;7.0;7.5;8.0;8.6"
          Write-Host "##vso[task.setvariable variable=CUDA_PATH;]C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v11.2\"
        displayName: Set CUDA 11.2 specific build flags
        condition: eq(variables.CUDA_VERSION, '112')

      - powershell: |
          Write-Host "##vso[task.setvariable variable=TORCH_CUDA_ARCH_LIST;]3.7+PTX;5.0;6.0;6.1;7.0;7.5"
          Write-Host "##vso[task.setvariable variable=CUDA_PATH;]C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v10.2\"
        displayName: Set CUDA 10.2 specific build flags
        condition: eq(variables.CUDA_VERSION, '102')

      - powershell: |
          Write-Host "##vso[task.setvariable variable=TORCH_CUDA_ARCH_LIST;]3.7+PTX;5.0;6.0;6.1;7.0;7.5"
          Write-Host "##vso[task.setvariable variable=CUDA_PATH;]C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v10.1\"
        displayName: Set CUDA 10.1 specific build flags
        condition: eq(variables.CUDA_VERSION, '101')

      - powershell: |
          Write-Host "##vso[task.setvariable variable=CUDA_BIN_PATH;]$env:CUDA_PATH\bin\"
          Write-Host "##vso[task.setvariable variable=CUDNN_ROOT;]$env:CUDA_PATH"
          Write-Host "##vso[task.setvariable variable=CUDNN_INCLUDE_DIR;]$env:CUDA_PATH\include\"
          Write-Host "##vso[task.setvariable variable=CUDNN_LIBRARY;]$env:CUDA_PATH\lib\x64\"
          Write-Host "##vso[task.prependpath]$env:CUDA_PATH\bin"
          Write-Host "##vso[task.setvariable variable=TORCH_NVCC_FLAGS;]-Xfatbin -compress-all --no-host-device-move-forward"
          Write-Host "##vso[task.setvariable variable=THRUST_IGNORE_CUB_VERSION_CHECK;]1"
          Write-Host "##vso[task.setvariable variable=NVTOOLSEXT_PATH;]C:\Program Files\NVIDIA Corporation\NvToolsExt\"
        displayName: Set CUDA environment variables

      - powershell: |
          copy "$(CUDA_BIN_PATH)\cusparse*64_*.dll*" $(Build.SourcesDirectory)\torch\lib
          copy "$(CUDA_BIN_PATH)\cublas*64_*.dll*" $(Build.SourcesDirectory)\torch\lib
          copy "$(CUDA_BIN_PATH)\cudart*64_*.dll*" $(Build.SourcesDirectory)\torch\lib
          copy "$(CUDA_BIN_PATH)\curand*64_*.dll*" $(Build.SourcesDirectory)\torch\lib
          copy "$(CUDA_BIN_PATH)\cufft*64_*.dll*" $(Build.SourcesDirectory)\torch\lib
          copy "$(CUDA_BIN_PATH)\cusolver*64_*.dll*" $(Build.SourcesDirectory)\torch\lib
          copy "$(CUDA_BIN_PATH)\cudnn*64_*.dll*" $(Build.SourcesDirectory)\torch\lib
          copy "$(CUDA_BIN_PATH)\nvrtc*64_*.dll*" $(Build.SourcesDirectory)\torch\lib
          copy "C:\Program Files\NVIDIA Corporation\NvToolsExt\bin\x64\nvToolsExt64_1.dll*" $(Build.SourcesDirectory)\torch\lib
          copy "$(CONDA_LIB_PATH)\libiomp*5md.dll" $(Build.SourcesDirectory)\torch\lib
          copy "$(CONDA_LIB_PATH)\uv.dll" $(Build.SourcesDirectory)\torch\lib
        displayName: Copy CUDA/cuDNN/libomp/libuv dlls to torch\lib

    # Set MKL, sccache and randomtemp environment variables
    - powershell: |
        Write-Host "##vso[task.setvariable variable=CMAKE_INCLUDE_PATH;]$(Build.SourcesDirectory)\mkl\include"
        Write-Host "##vso[task.setvariable variable=CMAKE_LIBRARY_PATH;]$(Build.SourcesDirectory)\mkl\lib;$env:CMAKE_LIBRARY_PATH"
        Write-Host "##vso[task.setvariable variable=ADDITIONAL_PATH;]$(Build.SourcesDirectory)\tmp_bin"
        Write-Host "##vso[task.setvariable variable=SCCACHE_IDLE_TIMEOUT;]1500"
        Write-Host "##vso[task.setvariable variable=CMAKE_CUDA_COMPILER_LAUNCHER;]$(Build.SourcesDirectory)/tmp_bin/randomtemp.exe;$(Build.SourcesDirectory)/tmp_bin/sccache.exe"
      displayName: Set MKL, sccache and randomtemp environment variables

    # View current environment variables
    - script:
        set
      displayName: Show environment variables
